// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `CoreProtocol.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:dfproto.CoreTextFragment)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CoreTextFragment {
    // message fields
    // @@protoc_insertion_point(field:dfproto.CoreTextFragment.text)
    pub text: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dfproto.CoreTextFragment.color)
    pub color: ::std::option::Option<::protobuf::EnumOrUnknown<core_text_fragment::Color>>,
    // special fields
    // @@protoc_insertion_point(special_field:dfproto.CoreTextFragment.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CoreTextFragment {
    fn default() -> &'a CoreTextFragment {
        <CoreTextFragment as ::protobuf::Message>::default_instance()
    }
}

impl CoreTextFragment {
    pub fn new() -> CoreTextFragment {
        ::std::default::Default::default()
    }

    // required string text = 1;

    pub fn text(&self) -> &str {
        match self.text.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_text(&mut self) {
        self.text = ::std::option::Option::None;
    }

    pub fn has_text(&self) -> bool {
        self.text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        if self.text.is_none() {
            self.text = ::std::option::Option::Some(::std::string::String::new());
        }
        self.text.as_mut().unwrap()
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        self.text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .dfproto.CoreTextFragment.Color color = 2;

    pub fn color(&self) -> core_text_fragment::Color {
        match self.color {
            Some(e) => e.enum_value_or(core_text_fragment::Color::COLOR_BLACK),
            None => core_text_fragment::Color::COLOR_BLACK,
        }
    }

    pub fn clear_color(&mut self) {
        self.color = ::std::option::Option::None;
    }

    pub fn has_color(&self) -> bool {
        self.color.is_some()
    }

    // Param is passed by value, moved
    pub fn set_color(&mut self, v: core_text_fragment::Color) {
        self.color = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "text",
            |m: &CoreTextFragment| { &m.text },
            |m: &mut CoreTextFragment| { &mut m.text },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "color",
            |m: &CoreTextFragment| { &m.color },
            |m: &mut CoreTextFragment| { &mut m.color },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CoreTextFragment>(
            "CoreTextFragment",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CoreTextFragment {
    const NAME: &'static str = "CoreTextFragment";

    fn is_initialized(&self) -> bool {
        if self.text.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.text = ::std::option::Option::Some(is.read_string()?);
                },
                16 => {
                    self.color = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.text.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.color {
            my_size += ::protobuf::rt::int32_size(2, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.text.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.color {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CoreTextFragment {
        CoreTextFragment::new()
    }

    fn clear(&mut self) {
        self.text = ::std::option::Option::None;
        self.color = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CoreTextFragment {
        static instance: CoreTextFragment = CoreTextFragment {
            text: ::std::option::Option::None,
            color: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CoreTextFragment {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CoreTextFragment").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CoreTextFragment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CoreTextFragment {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CoreTextFragment`
pub mod core_text_fragment {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:dfproto.CoreTextFragment.Color)
    pub enum Color {
        // @@protoc_insertion_point(enum_value:dfproto.CoreTextFragment.Color.COLOR_BLACK)
        COLOR_BLACK = 0,
        // @@protoc_insertion_point(enum_value:dfproto.CoreTextFragment.Color.COLOR_BLUE)
        COLOR_BLUE = 1,
        // @@protoc_insertion_point(enum_value:dfproto.CoreTextFragment.Color.COLOR_GREEN)
        COLOR_GREEN = 2,
        // @@protoc_insertion_point(enum_value:dfproto.CoreTextFragment.Color.COLOR_CYAN)
        COLOR_CYAN = 3,
        // @@protoc_insertion_point(enum_value:dfproto.CoreTextFragment.Color.COLOR_RED)
        COLOR_RED = 4,
        // @@protoc_insertion_point(enum_value:dfproto.CoreTextFragment.Color.COLOR_MAGENTA)
        COLOR_MAGENTA = 5,
        // @@protoc_insertion_point(enum_value:dfproto.CoreTextFragment.Color.COLOR_BROWN)
        COLOR_BROWN = 6,
        // @@protoc_insertion_point(enum_value:dfproto.CoreTextFragment.Color.COLOR_GREY)
        COLOR_GREY = 7,
        // @@protoc_insertion_point(enum_value:dfproto.CoreTextFragment.Color.COLOR_DARKGREY)
        COLOR_DARKGREY = 8,
        // @@protoc_insertion_point(enum_value:dfproto.CoreTextFragment.Color.COLOR_LIGHTBLUE)
        COLOR_LIGHTBLUE = 9,
        // @@protoc_insertion_point(enum_value:dfproto.CoreTextFragment.Color.COLOR_LIGHTGREEN)
        COLOR_LIGHTGREEN = 10,
        // @@protoc_insertion_point(enum_value:dfproto.CoreTextFragment.Color.COLOR_LIGHTCYAN)
        COLOR_LIGHTCYAN = 11,
        // @@protoc_insertion_point(enum_value:dfproto.CoreTextFragment.Color.COLOR_LIGHTRED)
        COLOR_LIGHTRED = 12,
        // @@protoc_insertion_point(enum_value:dfproto.CoreTextFragment.Color.COLOR_LIGHTMAGENTA)
        COLOR_LIGHTMAGENTA = 13,
        // @@protoc_insertion_point(enum_value:dfproto.CoreTextFragment.Color.COLOR_YELLOW)
        COLOR_YELLOW = 14,
        // @@protoc_insertion_point(enum_value:dfproto.CoreTextFragment.Color.COLOR_WHITE)
        COLOR_WHITE = 15,
    }

    impl ::protobuf::Enum for Color {
        const NAME: &'static str = "Color";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Color> {
            match value {
                0 => ::std::option::Option::Some(Color::COLOR_BLACK),
                1 => ::std::option::Option::Some(Color::COLOR_BLUE),
                2 => ::std::option::Option::Some(Color::COLOR_GREEN),
                3 => ::std::option::Option::Some(Color::COLOR_CYAN),
                4 => ::std::option::Option::Some(Color::COLOR_RED),
                5 => ::std::option::Option::Some(Color::COLOR_MAGENTA),
                6 => ::std::option::Option::Some(Color::COLOR_BROWN),
                7 => ::std::option::Option::Some(Color::COLOR_GREY),
                8 => ::std::option::Option::Some(Color::COLOR_DARKGREY),
                9 => ::std::option::Option::Some(Color::COLOR_LIGHTBLUE),
                10 => ::std::option::Option::Some(Color::COLOR_LIGHTGREEN),
                11 => ::std::option::Option::Some(Color::COLOR_LIGHTCYAN),
                12 => ::std::option::Option::Some(Color::COLOR_LIGHTRED),
                13 => ::std::option::Option::Some(Color::COLOR_LIGHTMAGENTA),
                14 => ::std::option::Option::Some(Color::COLOR_YELLOW),
                15 => ::std::option::Option::Some(Color::COLOR_WHITE),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<Color> {
            match str {
                "COLOR_BLACK" => ::std::option::Option::Some(Color::COLOR_BLACK),
                "COLOR_BLUE" => ::std::option::Option::Some(Color::COLOR_BLUE),
                "COLOR_GREEN" => ::std::option::Option::Some(Color::COLOR_GREEN),
                "COLOR_CYAN" => ::std::option::Option::Some(Color::COLOR_CYAN),
                "COLOR_RED" => ::std::option::Option::Some(Color::COLOR_RED),
                "COLOR_MAGENTA" => ::std::option::Option::Some(Color::COLOR_MAGENTA),
                "COLOR_BROWN" => ::std::option::Option::Some(Color::COLOR_BROWN),
                "COLOR_GREY" => ::std::option::Option::Some(Color::COLOR_GREY),
                "COLOR_DARKGREY" => ::std::option::Option::Some(Color::COLOR_DARKGREY),
                "COLOR_LIGHTBLUE" => ::std::option::Option::Some(Color::COLOR_LIGHTBLUE),
                "COLOR_LIGHTGREEN" => ::std::option::Option::Some(Color::COLOR_LIGHTGREEN),
                "COLOR_LIGHTCYAN" => ::std::option::Option::Some(Color::COLOR_LIGHTCYAN),
                "COLOR_LIGHTRED" => ::std::option::Option::Some(Color::COLOR_LIGHTRED),
                "COLOR_LIGHTMAGENTA" => ::std::option::Option::Some(Color::COLOR_LIGHTMAGENTA),
                "COLOR_YELLOW" => ::std::option::Option::Some(Color::COLOR_YELLOW),
                "COLOR_WHITE" => ::std::option::Option::Some(Color::COLOR_WHITE),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Color] = &[
            Color::COLOR_BLACK,
            Color::COLOR_BLUE,
            Color::COLOR_GREEN,
            Color::COLOR_CYAN,
            Color::COLOR_RED,
            Color::COLOR_MAGENTA,
            Color::COLOR_BROWN,
            Color::COLOR_GREY,
            Color::COLOR_DARKGREY,
            Color::COLOR_LIGHTBLUE,
            Color::COLOR_LIGHTGREEN,
            Color::COLOR_LIGHTCYAN,
            Color::COLOR_LIGHTRED,
            Color::COLOR_LIGHTMAGENTA,
            Color::COLOR_YELLOW,
            Color::COLOR_WHITE,
        ];
    }

    impl ::protobuf::EnumFull for Color {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CoreTextFragment.Color").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Color {
        fn default() -> Self {
            Color::COLOR_BLACK
        }
    }

    impl Color {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Color>("CoreTextFragment.Color")
        }
    }
}

// @@protoc_insertion_point(message:dfproto.CoreTextNotification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CoreTextNotification {
    // message fields
    // @@protoc_insertion_point(field:dfproto.CoreTextNotification.fragments)
    pub fragments: ::std::vec::Vec<CoreTextFragment>,
    // special fields
    // @@protoc_insertion_point(special_field:dfproto.CoreTextNotification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CoreTextNotification {
    fn default() -> &'a CoreTextNotification {
        <CoreTextNotification as ::protobuf::Message>::default_instance()
    }
}

impl CoreTextNotification {
    pub fn new() -> CoreTextNotification {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "fragments",
            |m: &CoreTextNotification| { &m.fragments },
            |m: &mut CoreTextNotification| { &mut m.fragments },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CoreTextNotification>(
            "CoreTextNotification",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CoreTextNotification {
    const NAME: &'static str = "CoreTextNotification";

    fn is_initialized(&self) -> bool {
        for v in &self.fragments {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.fragments.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.fragments {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.fragments {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CoreTextNotification {
        CoreTextNotification::new()
    }

    fn clear(&mut self) {
        self.fragments.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CoreTextNotification {
        static instance: CoreTextNotification = CoreTextNotification {
            fragments: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CoreTextNotification {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CoreTextNotification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CoreTextNotification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CoreTextNotification {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dfproto.CoreErrorNotification)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CoreErrorNotification {
    // message fields
    // @@protoc_insertion_point(field:dfproto.CoreErrorNotification.code)
    pub code: ::std::option::Option<::protobuf::EnumOrUnknown<core_error_notification::ErrorCode>>,
    // special fields
    // @@protoc_insertion_point(special_field:dfproto.CoreErrorNotification.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CoreErrorNotification {
    fn default() -> &'a CoreErrorNotification {
        <CoreErrorNotification as ::protobuf::Message>::default_instance()
    }
}

impl CoreErrorNotification {
    pub fn new() -> CoreErrorNotification {
        ::std::default::Default::default()
    }

    // required .dfproto.CoreErrorNotification.ErrorCode code = 1;

    pub fn code(&self) -> core_error_notification::ErrorCode {
        match self.code {
            Some(e) => e.enum_value_or(core_error_notification::ErrorCode::CR_LINK_FAILURE),
            None => core_error_notification::ErrorCode::CR_LINK_FAILURE,
        }
    }

    pub fn clear_code(&mut self) {
        self.code = ::std::option::Option::None;
    }

    pub fn has_code(&self) -> bool {
        self.code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: core_error_notification::ErrorCode) {
        self.code = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "code",
            |m: &CoreErrorNotification| { &m.code },
            |m: &mut CoreErrorNotification| { &mut m.code },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CoreErrorNotification>(
            "CoreErrorNotification",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CoreErrorNotification {
    const NAME: &'static str = "CoreErrorNotification";

    fn is_initialized(&self) -> bool {
        if self.code.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.code = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.code {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.code {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CoreErrorNotification {
        CoreErrorNotification::new()
    }

    fn clear(&mut self) {
        self.code = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CoreErrorNotification {
        static instance: CoreErrorNotification = CoreErrorNotification {
            code: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CoreErrorNotification {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CoreErrorNotification").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CoreErrorNotification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CoreErrorNotification {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CoreErrorNotification`
pub mod core_error_notification {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:dfproto.CoreErrorNotification.ErrorCode)
    pub enum ErrorCode {
        // @@protoc_insertion_point(enum_value:dfproto.CoreErrorNotification.ErrorCode.CR_LINK_FAILURE)
        CR_LINK_FAILURE = -3,
        // @@protoc_insertion_point(enum_value:dfproto.CoreErrorNotification.ErrorCode.CR_WOULD_BREAK)
        CR_WOULD_BREAK = -2,
        // @@protoc_insertion_point(enum_value:dfproto.CoreErrorNotification.ErrorCode.CR_NOT_IMPLEMENTED)
        CR_NOT_IMPLEMENTED = -1,
        // @@protoc_insertion_point(enum_value:dfproto.CoreErrorNotification.ErrorCode.CR_OK)
        CR_OK = 0,
        // @@protoc_insertion_point(enum_value:dfproto.CoreErrorNotification.ErrorCode.CR_FAILURE)
        CR_FAILURE = 1,
        // @@protoc_insertion_point(enum_value:dfproto.CoreErrorNotification.ErrorCode.CR_WRONG_USAGE)
        CR_WRONG_USAGE = 2,
        // @@protoc_insertion_point(enum_value:dfproto.CoreErrorNotification.ErrorCode.CR_NOT_FOUND)
        CR_NOT_FOUND = 3,
    }

    impl ::protobuf::Enum for ErrorCode {
        const NAME: &'static str = "ErrorCode";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<ErrorCode> {
            match value {
                -3 => ::std::option::Option::Some(ErrorCode::CR_LINK_FAILURE),
                -2 => ::std::option::Option::Some(ErrorCode::CR_WOULD_BREAK),
                -1 => ::std::option::Option::Some(ErrorCode::CR_NOT_IMPLEMENTED),
                0 => ::std::option::Option::Some(ErrorCode::CR_OK),
                1 => ::std::option::Option::Some(ErrorCode::CR_FAILURE),
                2 => ::std::option::Option::Some(ErrorCode::CR_WRONG_USAGE),
                3 => ::std::option::Option::Some(ErrorCode::CR_NOT_FOUND),
                _ => ::std::option::Option::None
            }
        }

        fn from_str(str: &str) -> ::std::option::Option<ErrorCode> {
            match str {
                "CR_LINK_FAILURE" => ::std::option::Option::Some(ErrorCode::CR_LINK_FAILURE),
                "CR_WOULD_BREAK" => ::std::option::Option::Some(ErrorCode::CR_WOULD_BREAK),
                "CR_NOT_IMPLEMENTED" => ::std::option::Option::Some(ErrorCode::CR_NOT_IMPLEMENTED),
                "CR_OK" => ::std::option::Option::Some(ErrorCode::CR_OK),
                "CR_FAILURE" => ::std::option::Option::Some(ErrorCode::CR_FAILURE),
                "CR_WRONG_USAGE" => ::std::option::Option::Some(ErrorCode::CR_WRONG_USAGE),
                "CR_NOT_FOUND" => ::std::option::Option::Some(ErrorCode::CR_NOT_FOUND),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [ErrorCode] = &[
            ErrorCode::CR_LINK_FAILURE,
            ErrorCode::CR_WOULD_BREAK,
            ErrorCode::CR_NOT_IMPLEMENTED,
            ErrorCode::CR_OK,
            ErrorCode::CR_FAILURE,
            ErrorCode::CR_WRONG_USAGE,
            ErrorCode::CR_NOT_FOUND,
        ];
    }

    impl ::protobuf::EnumFull for ErrorCode {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("CoreErrorNotification.ErrorCode").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = match self {
                ErrorCode::CR_LINK_FAILURE => 0,
                ErrorCode::CR_WOULD_BREAK => 1,
                ErrorCode::CR_NOT_IMPLEMENTED => 2,
                ErrorCode::CR_OK => 3,
                ErrorCode::CR_FAILURE => 4,
                ErrorCode::CR_WRONG_USAGE => 5,
                ErrorCode::CR_NOT_FOUND => 6,
            };
            Self::enum_descriptor().value_by_index(index)
        }
    }

    // Note, `Default` is implemented although default value is not 0
    impl ::std::default::Default for ErrorCode {
        fn default() -> Self {
            ErrorCode::CR_LINK_FAILURE
        }
    }

    impl ErrorCode {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ErrorCode>("CoreErrorNotification.ErrorCode")
        }
    }
}

// @@protoc_insertion_point(message:dfproto.EmptyMessage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EmptyMessage {
    // special fields
    // @@protoc_insertion_point(special_field:dfproto.EmptyMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EmptyMessage {
    fn default() -> &'a EmptyMessage {
        <EmptyMessage as ::protobuf::Message>::default_instance()
    }
}

impl EmptyMessage {
    pub fn new() -> EmptyMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EmptyMessage>(
            "EmptyMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EmptyMessage {
    const NAME: &'static str = "EmptyMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EmptyMessage {
        EmptyMessage::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EmptyMessage {
        static instance: EmptyMessage = EmptyMessage {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EmptyMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EmptyMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EmptyMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EmptyMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dfproto.IntMessage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct IntMessage {
    // message fields
    // @@protoc_insertion_point(field:dfproto.IntMessage.value)
    pub value: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:dfproto.IntMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IntMessage {
    fn default() -> &'a IntMessage {
        <IntMessage as ::protobuf::Message>::default_instance()
    }
}

impl IntMessage {
    pub fn new() -> IntMessage {
        ::std::default::Default::default()
    }

    // required int32 value = 1;

    pub fn value(&self) -> i32 {
        self.value.unwrap_or(0)
    }

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: i32) {
        self.value = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "value",
            |m: &IntMessage| { &m.value },
            |m: &mut IntMessage| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IntMessage>(
            "IntMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IntMessage {
    const NAME: &'static str = "IntMessage";

    fn is_initialized(&self) -> bool {
        if self.value.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.value = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.value {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.value {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IntMessage {
        IntMessage::new()
    }

    fn clear(&mut self) {
        self.value = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IntMessage {
        static instance: IntMessage = IntMessage {
            value: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IntMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IntMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IntMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IntMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dfproto.IntListMessage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct IntListMessage {
    // message fields
    // @@protoc_insertion_point(field:dfproto.IntListMessage.value)
    pub value: ::std::vec::Vec<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:dfproto.IntListMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a IntListMessage {
    fn default() -> &'a IntListMessage {
        <IntListMessage as ::protobuf::Message>::default_instance()
    }
}

impl IntListMessage {
    pub fn new() -> IntListMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "value",
            |m: &IntListMessage| { &m.value },
            |m: &mut IntListMessage| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<IntListMessage>(
            "IntListMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for IntListMessage {
    const NAME: &'static str = "IntListMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_int32_into(&mut self.value)?;
                },
                8 => {
                    self.value.push(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.value {
            my_size += ::protobuf::rt::int32_size(1, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.value {
            os.write_int32(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> IntListMessage {
        IntListMessage::new()
    }

    fn clear(&mut self) {
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static IntListMessage {
        static instance: IntListMessage = IntListMessage {
            value: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for IntListMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("IntListMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for IntListMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IntListMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dfproto.StringMessage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StringMessage {
    // message fields
    // @@protoc_insertion_point(field:dfproto.StringMessage.value)
    pub value: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dfproto.StringMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StringMessage {
    fn default() -> &'a StringMessage {
        <StringMessage as ::protobuf::Message>::default_instance()
    }
}

impl StringMessage {
    pub fn new() -> StringMessage {
        ::std::default::Default::default()
    }

    // required string value = 1;

    pub fn value(&self) -> &str {
        match self.value.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        if self.value.is_none() {
            self.value = ::std::option::Option::Some(::std::string::String::new());
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        self.value.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "value",
            |m: &StringMessage| { &m.value },
            |m: &mut StringMessage| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StringMessage>(
            "StringMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StringMessage {
    const NAME: &'static str = "StringMessage";

    fn is_initialized(&self) -> bool {
        if self.value.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.value = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.value.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.value.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StringMessage {
        StringMessage::new()
    }

    fn clear(&mut self) {
        self.value = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StringMessage {
        static instance: StringMessage = StringMessage {
            value: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StringMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StringMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StringMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StringMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dfproto.StringListMessage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StringListMessage {
    // message fields
    // @@protoc_insertion_point(field:dfproto.StringListMessage.value)
    pub value: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dfproto.StringListMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StringListMessage {
    fn default() -> &'a StringListMessage {
        <StringListMessage as ::protobuf::Message>::default_instance()
    }
}

impl StringListMessage {
    pub fn new() -> StringListMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "value",
            |m: &StringListMessage| { &m.value },
            |m: &mut StringListMessage| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StringListMessage>(
            "StringListMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StringListMessage {
    const NAME: &'static str = "StringListMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.value.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.value {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.value {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StringListMessage {
        StringListMessage::new()
    }

    fn clear(&mut self) {
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StringListMessage {
        static instance: StringListMessage = StringListMessage {
            value: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StringListMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StringListMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StringListMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StringListMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dfproto.CoreBindRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CoreBindRequest {
    // message fields
    // @@protoc_insertion_point(field:dfproto.CoreBindRequest.method)
    pub method: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dfproto.CoreBindRequest.input_msg)
    pub input_msg: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dfproto.CoreBindRequest.output_msg)
    pub output_msg: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dfproto.CoreBindRequest.plugin)
    pub plugin: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dfproto.CoreBindRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CoreBindRequest {
    fn default() -> &'a CoreBindRequest {
        <CoreBindRequest as ::protobuf::Message>::default_instance()
    }
}

impl CoreBindRequest {
    pub fn new() -> CoreBindRequest {
        ::std::default::Default::default()
    }

    // required string method = 1;

    pub fn method(&self) -> &str {
        match self.method.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_method(&mut self) {
        self.method = ::std::option::Option::None;
    }

    pub fn has_method(&self) -> bool {
        self.method.is_some()
    }

    // Param is passed by value, moved
    pub fn set_method(&mut self, v: ::std::string::String) {
        self.method = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_method(&mut self) -> &mut ::std::string::String {
        if self.method.is_none() {
            self.method = ::std::option::Option::Some(::std::string::String::new());
        }
        self.method.as_mut().unwrap()
    }

    // Take field
    pub fn take_method(&mut self) -> ::std::string::String {
        self.method.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string input_msg = 2;

    pub fn input_msg(&self) -> &str {
        match self.input_msg.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_input_msg(&mut self) {
        self.input_msg = ::std::option::Option::None;
    }

    pub fn has_input_msg(&self) -> bool {
        self.input_msg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_input_msg(&mut self, v: ::std::string::String) {
        self.input_msg = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_input_msg(&mut self) -> &mut ::std::string::String {
        if self.input_msg.is_none() {
            self.input_msg = ::std::option::Option::Some(::std::string::String::new());
        }
        self.input_msg.as_mut().unwrap()
    }

    // Take field
    pub fn take_input_msg(&mut self) -> ::std::string::String {
        self.input_msg.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string output_msg = 3;

    pub fn output_msg(&self) -> &str {
        match self.output_msg.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_output_msg(&mut self) {
        self.output_msg = ::std::option::Option::None;
    }

    pub fn has_output_msg(&self) -> bool {
        self.output_msg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_output_msg(&mut self, v: ::std::string::String) {
        self.output_msg = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_output_msg(&mut self) -> &mut ::std::string::String {
        if self.output_msg.is_none() {
            self.output_msg = ::std::option::Option::Some(::std::string::String::new());
        }
        self.output_msg.as_mut().unwrap()
    }

    // Take field
    pub fn take_output_msg(&mut self) -> ::std::string::String {
        self.output_msg.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string plugin = 4;

    pub fn plugin(&self) -> &str {
        match self.plugin.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_plugin(&mut self) {
        self.plugin = ::std::option::Option::None;
    }

    pub fn has_plugin(&self) -> bool {
        self.plugin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_plugin(&mut self, v: ::std::string::String) {
        self.plugin = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_plugin(&mut self) -> &mut ::std::string::String {
        if self.plugin.is_none() {
            self.plugin = ::std::option::Option::Some(::std::string::String::new());
        }
        self.plugin.as_mut().unwrap()
    }

    // Take field
    pub fn take_plugin(&mut self) -> ::std::string::String {
        self.plugin.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "method",
            |m: &CoreBindRequest| { &m.method },
            |m: &mut CoreBindRequest| { &mut m.method },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "input_msg",
            |m: &CoreBindRequest| { &m.input_msg },
            |m: &mut CoreBindRequest| { &mut m.input_msg },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "output_msg",
            |m: &CoreBindRequest| { &m.output_msg },
            |m: &mut CoreBindRequest| { &mut m.output_msg },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "plugin",
            |m: &CoreBindRequest| { &m.plugin },
            |m: &mut CoreBindRequest| { &mut m.plugin },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CoreBindRequest>(
            "CoreBindRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CoreBindRequest {
    const NAME: &'static str = "CoreBindRequest";

    fn is_initialized(&self) -> bool {
        if self.method.is_none() {
            return false;
        }
        if self.input_msg.is_none() {
            return false;
        }
        if self.output_msg.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.method = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.input_msg = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.output_msg = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.plugin = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.method.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.input_msg.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.output_msg.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.plugin.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.method.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.input_msg.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.output_msg.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.plugin.as_ref() {
            os.write_string(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CoreBindRequest {
        CoreBindRequest::new()
    }

    fn clear(&mut self) {
        self.method = ::std::option::Option::None;
        self.input_msg = ::std::option::Option::None;
        self.output_msg = ::std::option::Option::None;
        self.plugin = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CoreBindRequest {
        static instance: CoreBindRequest = CoreBindRequest {
            method: ::std::option::Option::None,
            input_msg: ::std::option::Option::None,
            output_msg: ::std::option::Option::None,
            plugin: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CoreBindRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CoreBindRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CoreBindRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CoreBindRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dfproto.CoreBindReply)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CoreBindReply {
    // message fields
    // @@protoc_insertion_point(field:dfproto.CoreBindReply.assigned_id)
    pub assigned_id: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:dfproto.CoreBindReply.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CoreBindReply {
    fn default() -> &'a CoreBindReply {
        <CoreBindReply as ::protobuf::Message>::default_instance()
    }
}

impl CoreBindReply {
    pub fn new() -> CoreBindReply {
        ::std::default::Default::default()
    }

    // required int32 assigned_id = 1;

    pub fn assigned_id(&self) -> i32 {
        self.assigned_id.unwrap_or(0)
    }

    pub fn clear_assigned_id(&mut self) {
        self.assigned_id = ::std::option::Option::None;
    }

    pub fn has_assigned_id(&self) -> bool {
        self.assigned_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_assigned_id(&mut self, v: i32) {
        self.assigned_id = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "assigned_id",
            |m: &CoreBindReply| { &m.assigned_id },
            |m: &mut CoreBindReply| { &mut m.assigned_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CoreBindReply>(
            "CoreBindReply",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CoreBindReply {
    const NAME: &'static str = "CoreBindReply";

    fn is_initialized(&self) -> bool {
        if self.assigned_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.assigned_id = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.assigned_id {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.assigned_id {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CoreBindReply {
        CoreBindReply::new()
    }

    fn clear(&mut self) {
        self.assigned_id = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CoreBindReply {
        static instance: CoreBindReply = CoreBindReply {
            assigned_id: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CoreBindReply {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CoreBindReply").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CoreBindReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CoreBindReply {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dfproto.CoreRunCommandRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CoreRunCommandRequest {
    // message fields
    // @@protoc_insertion_point(field:dfproto.CoreRunCommandRequest.command)
    pub command: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dfproto.CoreRunCommandRequest.arguments)
    pub arguments: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dfproto.CoreRunCommandRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CoreRunCommandRequest {
    fn default() -> &'a CoreRunCommandRequest {
        <CoreRunCommandRequest as ::protobuf::Message>::default_instance()
    }
}

impl CoreRunCommandRequest {
    pub fn new() -> CoreRunCommandRequest {
        ::std::default::Default::default()
    }

    // required string command = 1;

    pub fn command(&self) -> &str {
        match self.command.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_command(&mut self) {
        self.command = ::std::option::Option::None;
    }

    pub fn has_command(&self) -> bool {
        self.command.is_some()
    }

    // Param is passed by value, moved
    pub fn set_command(&mut self, v: ::std::string::String) {
        self.command = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_command(&mut self) -> &mut ::std::string::String {
        if self.command.is_none() {
            self.command = ::std::option::Option::Some(::std::string::String::new());
        }
        self.command.as_mut().unwrap()
    }

    // Take field
    pub fn take_command(&mut self) -> ::std::string::String {
        self.command.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "command",
            |m: &CoreRunCommandRequest| { &m.command },
            |m: &mut CoreRunCommandRequest| { &mut m.command },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "arguments",
            |m: &CoreRunCommandRequest| { &m.arguments },
            |m: &mut CoreRunCommandRequest| { &mut m.arguments },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CoreRunCommandRequest>(
            "CoreRunCommandRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CoreRunCommandRequest {
    const NAME: &'static str = "CoreRunCommandRequest";

    fn is_initialized(&self) -> bool {
        if self.command.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.command = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.arguments.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.command.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.arguments {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.command.as_ref() {
            os.write_string(1, v)?;
        }
        for v in &self.arguments {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CoreRunCommandRequest {
        CoreRunCommandRequest::new()
    }

    fn clear(&mut self) {
        self.command = ::std::option::Option::None;
        self.arguments.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CoreRunCommandRequest {
        static instance: CoreRunCommandRequest = CoreRunCommandRequest {
            command: ::std::option::Option::None,
            arguments: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CoreRunCommandRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CoreRunCommandRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CoreRunCommandRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CoreRunCommandRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:dfproto.CoreRunLuaRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CoreRunLuaRequest {
    // message fields
    // @@protoc_insertion_point(field:dfproto.CoreRunLuaRequest.module)
    pub module: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dfproto.CoreRunLuaRequest.function)
    pub function: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:dfproto.CoreRunLuaRequest.arguments)
    pub arguments: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:dfproto.CoreRunLuaRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CoreRunLuaRequest {
    fn default() -> &'a CoreRunLuaRequest {
        <CoreRunLuaRequest as ::protobuf::Message>::default_instance()
    }
}

impl CoreRunLuaRequest {
    pub fn new() -> CoreRunLuaRequest {
        ::std::default::Default::default()
    }

    // required string module = 1;

    pub fn module(&self) -> &str {
        match self.module.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_module(&mut self) {
        self.module = ::std::option::Option::None;
    }

    pub fn has_module(&self) -> bool {
        self.module.is_some()
    }

    // Param is passed by value, moved
    pub fn set_module(&mut self, v: ::std::string::String) {
        self.module = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_module(&mut self) -> &mut ::std::string::String {
        if self.module.is_none() {
            self.module = ::std::option::Option::Some(::std::string::String::new());
        }
        self.module.as_mut().unwrap()
    }

    // Take field
    pub fn take_module(&mut self) -> ::std::string::String {
        self.module.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string function = 2;

    pub fn function(&self) -> &str {
        match self.function.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_function(&mut self) {
        self.function = ::std::option::Option::None;
    }

    pub fn has_function(&self) -> bool {
        self.function.is_some()
    }

    // Param is passed by value, moved
    pub fn set_function(&mut self, v: ::std::string::String) {
        self.function = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_function(&mut self) -> &mut ::std::string::String {
        if self.function.is_none() {
            self.function = ::std::option::Option::Some(::std::string::String::new());
        }
        self.function.as_mut().unwrap()
    }

    // Take field
    pub fn take_function(&mut self) -> ::std::string::String {
        self.function.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "module",
            |m: &CoreRunLuaRequest| { &m.module },
            |m: &mut CoreRunLuaRequest| { &mut m.module },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "function",
            |m: &CoreRunLuaRequest| { &m.function },
            |m: &mut CoreRunLuaRequest| { &mut m.function },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "arguments",
            |m: &CoreRunLuaRequest| { &m.arguments },
            |m: &mut CoreRunLuaRequest| { &mut m.arguments },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CoreRunLuaRequest>(
            "CoreRunLuaRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CoreRunLuaRequest {
    const NAME: &'static str = "CoreRunLuaRequest";

    fn is_initialized(&self) -> bool {
        if self.module.is_none() {
            return false;
        }
        if self.function.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.module = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.function = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.arguments.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.module.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.function.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        for value in &self.arguments {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.module.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.function.as_ref() {
            os.write_string(2, v)?;
        }
        for v in &self.arguments {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CoreRunLuaRequest {
        CoreRunLuaRequest::new()
    }

    fn clear(&mut self) {
        self.module = ::std::option::Option::None;
        self.function = ::std::option::Option::None;
        self.arguments.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CoreRunLuaRequest {
        static instance: CoreRunLuaRequest = CoreRunLuaRequest {
            module: ::std::option::Option::None,
            function: ::std::option::Option::None,
            arguments: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CoreRunLuaRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CoreRunLuaRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CoreRunLuaRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CoreRunLuaRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12CoreProtocol.proto\x12\x07dfproto\"\x8f\x03\n\x10CoreTextFragment\
    \x12\x12\n\x04text\x18\x01\x20\x02(\tR\x04text\x125\n\x05color\x18\x02\
    \x20\x01(\x0e2\x1f.dfproto.CoreTextFragment.ColorR\x05color\"\xaf\x02\n\
    \x05Color\x12\x0f\n\x0bCOLOR_BLACK\x10\0\x12\x0e\n\nCOLOR_BLUE\x10\x01\
    \x12\x0f\n\x0bCOLOR_GREEN\x10\x02\x12\x0e\n\nCOLOR_CYAN\x10\x03\x12\r\n\
    \tCOLOR_RED\x10\x04\x12\x11\n\rCOLOR_MAGENTA\x10\x05\x12\x0f\n\x0bCOLOR_\
    BROWN\x10\x06\x12\x0e\n\nCOLOR_GREY\x10\x07\x12\x12\n\x0eCOLOR_DARKGREY\
    \x10\x08\x12\x13\n\x0fCOLOR_LIGHTBLUE\x10\t\x12\x14\n\x10COLOR_LIGHTGREE\
    N\x10\n\x12\x13\n\x0fCOLOR_LIGHTCYAN\x10\x0b\x12\x12\n\x0eCOLOR_LIGHTRED\
    \x10\x0c\x12\x16\n\x12COLOR_LIGHTMAGENTA\x10\r\x12\x10\n\x0cCOLOR_YELLOW\
    \x10\x0e\x12\x0f\n\x0bCOLOR_WHITE\x10\x0f\"O\n\x14CoreTextNotification\
    \x127\n\tfragments\x18\x01\x20\x03(\x0b2\x19.dfproto.CoreTextFragmentR\t\
    fragments\"\x80\x02\n\x15CoreErrorNotification\x12<\n\x04code\x18\x01\
    \x20\x02(\x0e2(.dfproto.CoreErrorNotification.ErrorCodeR\x04code\"\xa8\
    \x01\n\tErrorCode\x12\x1c\n\x0fCR_LINK_FAILURE\x10\xfd\xff\xff\xff\xff\
    \xff\xff\xff\xff\x01\x12\x1b\n\x0eCR_WOULD_BREAK\x10\xfe\xff\xff\xff\xff\
    \xff\xff\xff\xff\x01\x12\x1f\n\x12CR_NOT_IMPLEMENTED\x10\xff\xff\xff\xff\
    \xff\xff\xff\xff\xff\x01\x12\t\n\x05CR_OK\x10\0\x12\x0e\n\nCR_FAILURE\
    \x10\x01\x12\x12\n\x0eCR_WRONG_USAGE\x10\x02\x12\x10\n\x0cCR_NOT_FOUND\
    \x10\x03\"\x0e\n\x0cEmptyMessage\"\"\n\nIntMessage\x12\x14\n\x05value\
    \x18\x01\x20\x02(\x05R\x05value\"&\n\x0eIntListMessage\x12\x14\n\x05valu\
    e\x18\x01\x20\x03(\x05R\x05value\"%\n\rStringMessage\x12\x14\n\x05value\
    \x18\x01\x20\x02(\tR\x05value\")\n\x11StringListMessage\x12\x14\n\x05val\
    ue\x18\x01\x20\x03(\tR\x05value\"}\n\x0fCoreBindRequest\x12\x16\n\x06met\
    hod\x18\x01\x20\x02(\tR\x06method\x12\x1b\n\tinput_msg\x18\x02\x20\x02(\
    \tR\x08inputMsg\x12\x1d\n\noutput_msg\x18\x03\x20\x02(\tR\toutputMsg\x12\
    \x16\n\x06plugin\x18\x04\x20\x01(\tR\x06plugin\"0\n\rCoreBindReply\x12\
    \x1f\n\x0bassigned_id\x18\x01\x20\x02(\x05R\nassignedId\"O\n\x15CoreRunC\
    ommandRequest\x12\x18\n\x07command\x18\x01\x20\x02(\tR\x07command\x12\
    \x1c\n\targuments\x18\x02\x20\x03(\tR\targuments\"e\n\x11CoreRunLuaReque\
    st\x12\x16\n\x06module\x18\x01\x20\x02(\tR\x06module\x12\x1a\n\x08functi\
    on\x18\x02\x20\x02(\tR\x08function\x12\x1c\n\targuments\x18\x03\x20\x03(\
    \tR\targumentsB\x02H\x03b\x06proto2\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(12);
            messages.push(CoreTextFragment::generated_message_descriptor_data());
            messages.push(CoreTextNotification::generated_message_descriptor_data());
            messages.push(CoreErrorNotification::generated_message_descriptor_data());
            messages.push(EmptyMessage::generated_message_descriptor_data());
            messages.push(IntMessage::generated_message_descriptor_data());
            messages.push(IntListMessage::generated_message_descriptor_data());
            messages.push(StringMessage::generated_message_descriptor_data());
            messages.push(StringListMessage::generated_message_descriptor_data());
            messages.push(CoreBindRequest::generated_message_descriptor_data());
            messages.push(CoreBindReply::generated_message_descriptor_data());
            messages.push(CoreRunCommandRequest::generated_message_descriptor_data());
            messages.push(CoreRunLuaRequest::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(core_text_fragment::Color::generated_enum_descriptor_data());
            enums.push(core_error_notification::ErrorCode::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
