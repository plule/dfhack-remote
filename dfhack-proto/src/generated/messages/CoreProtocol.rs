// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `CoreProtocol.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct CoreTextFragment {
    // message fields
    text: ::protobuf::SingularField<::std::string::String>,
    color: ::std::option::Option<CoreTextFragment_Color>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CoreTextFragment {
    fn default() -> &'a CoreTextFragment {
        <CoreTextFragment as ::protobuf::Message>::default_instance()
    }
}

impl CoreTextFragment {
    pub fn new() -> CoreTextFragment {
        ::std::default::Default::default()
    }

    // required string text = 1;


    pub fn get_text(&self) -> &str {
        match self.text.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_text(&mut self) {
        self.text.clear();
    }

    pub fn has_text(&self) -> bool {
        self.text.is_some()
    }

    // Param is passed by value, moved
    pub fn set_text(&mut self, v: ::std::string::String) {
        self.text = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_text(&mut self) -> &mut ::std::string::String {
        if self.text.is_none() {
            self.text.set_default();
        }
        self.text.as_mut().unwrap()
    }

    // Take field
    pub fn take_text(&mut self) -> ::std::string::String {
        self.text.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .dfproto.CoreTextFragment.Color color = 2;


    pub fn get_color(&self) -> CoreTextFragment_Color {
        self.color.unwrap_or(CoreTextFragment_Color::COLOR_BLACK)
    }
    pub fn clear_color(&mut self) {
        self.color = ::std::option::Option::None;
    }

    pub fn has_color(&self) -> bool {
        self.color.is_some()
    }

    // Param is passed by value, moved
    pub fn set_color(&mut self, v: CoreTextFragment_Color) {
        self.color = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CoreTextFragment {
    fn is_initialized(&self) -> bool {
        if self.text.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.text)?;
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.color, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.text.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.color {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.text.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.color {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CoreTextFragment {
        CoreTextFragment::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "text",
                |m: &CoreTextFragment| { &m.text },
                |m: &mut CoreTextFragment| { &mut m.text },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CoreTextFragment_Color>>(
                "color",
                |m: &CoreTextFragment| { &m.color },
                |m: &mut CoreTextFragment| { &mut m.color },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CoreTextFragment>(
                "CoreTextFragment",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CoreTextFragment {
        static instance: ::protobuf::rt::LazyV2<CoreTextFragment> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CoreTextFragment::new)
    }
}

impl ::protobuf::Clear for CoreTextFragment {
    fn clear(&mut self) {
        self.text.clear();
        self.color = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CoreTextFragment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CoreTextFragment {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CoreTextFragment_Color {
    COLOR_BLACK = 0,
    COLOR_BLUE = 1,
    COLOR_GREEN = 2,
    COLOR_CYAN = 3,
    COLOR_RED = 4,
    COLOR_MAGENTA = 5,
    COLOR_BROWN = 6,
    COLOR_GREY = 7,
    COLOR_DARKGREY = 8,
    COLOR_LIGHTBLUE = 9,
    COLOR_LIGHTGREEN = 10,
    COLOR_LIGHTCYAN = 11,
    COLOR_LIGHTRED = 12,
    COLOR_LIGHTMAGENTA = 13,
    COLOR_YELLOW = 14,
    COLOR_WHITE = 15,
}

impl ::protobuf::ProtobufEnum for CoreTextFragment_Color {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CoreTextFragment_Color> {
        match value {
            0 => ::std::option::Option::Some(CoreTextFragment_Color::COLOR_BLACK),
            1 => ::std::option::Option::Some(CoreTextFragment_Color::COLOR_BLUE),
            2 => ::std::option::Option::Some(CoreTextFragment_Color::COLOR_GREEN),
            3 => ::std::option::Option::Some(CoreTextFragment_Color::COLOR_CYAN),
            4 => ::std::option::Option::Some(CoreTextFragment_Color::COLOR_RED),
            5 => ::std::option::Option::Some(CoreTextFragment_Color::COLOR_MAGENTA),
            6 => ::std::option::Option::Some(CoreTextFragment_Color::COLOR_BROWN),
            7 => ::std::option::Option::Some(CoreTextFragment_Color::COLOR_GREY),
            8 => ::std::option::Option::Some(CoreTextFragment_Color::COLOR_DARKGREY),
            9 => ::std::option::Option::Some(CoreTextFragment_Color::COLOR_LIGHTBLUE),
            10 => ::std::option::Option::Some(CoreTextFragment_Color::COLOR_LIGHTGREEN),
            11 => ::std::option::Option::Some(CoreTextFragment_Color::COLOR_LIGHTCYAN),
            12 => ::std::option::Option::Some(CoreTextFragment_Color::COLOR_LIGHTRED),
            13 => ::std::option::Option::Some(CoreTextFragment_Color::COLOR_LIGHTMAGENTA),
            14 => ::std::option::Option::Some(CoreTextFragment_Color::COLOR_YELLOW),
            15 => ::std::option::Option::Some(CoreTextFragment_Color::COLOR_WHITE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CoreTextFragment_Color] = &[
            CoreTextFragment_Color::COLOR_BLACK,
            CoreTextFragment_Color::COLOR_BLUE,
            CoreTextFragment_Color::COLOR_GREEN,
            CoreTextFragment_Color::COLOR_CYAN,
            CoreTextFragment_Color::COLOR_RED,
            CoreTextFragment_Color::COLOR_MAGENTA,
            CoreTextFragment_Color::COLOR_BROWN,
            CoreTextFragment_Color::COLOR_GREY,
            CoreTextFragment_Color::COLOR_DARKGREY,
            CoreTextFragment_Color::COLOR_LIGHTBLUE,
            CoreTextFragment_Color::COLOR_LIGHTGREEN,
            CoreTextFragment_Color::COLOR_LIGHTCYAN,
            CoreTextFragment_Color::COLOR_LIGHTRED,
            CoreTextFragment_Color::COLOR_LIGHTMAGENTA,
            CoreTextFragment_Color::COLOR_YELLOW,
            CoreTextFragment_Color::COLOR_WHITE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CoreTextFragment_Color>("CoreTextFragment.Color", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CoreTextFragment_Color {
}

impl ::std::default::Default for CoreTextFragment_Color {
    fn default() -> Self {
        CoreTextFragment_Color::COLOR_BLACK
    }
}

impl ::protobuf::reflect::ProtobufValue for CoreTextFragment_Color {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CoreTextNotification {
    // message fields
    pub fragments: ::protobuf::RepeatedField<CoreTextFragment>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CoreTextNotification {
    fn default() -> &'a CoreTextNotification {
        <CoreTextNotification as ::protobuf::Message>::default_instance()
    }
}

impl CoreTextNotification {
    pub fn new() -> CoreTextNotification {
        ::std::default::Default::default()
    }

    // repeated .dfproto.CoreTextFragment fragments = 1;


    pub fn get_fragments(&self) -> &[CoreTextFragment] {
        &self.fragments
    }
    pub fn clear_fragments(&mut self) {
        self.fragments.clear();
    }

    // Param is passed by value, moved
    pub fn set_fragments(&mut self, v: ::protobuf::RepeatedField<CoreTextFragment>) {
        self.fragments = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fragments(&mut self) -> &mut ::protobuf::RepeatedField<CoreTextFragment> {
        &mut self.fragments
    }

    // Take field
    pub fn take_fragments(&mut self) -> ::protobuf::RepeatedField<CoreTextFragment> {
        ::std::mem::replace(&mut self.fragments, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CoreTextNotification {
    fn is_initialized(&self) -> bool {
        for v in &self.fragments {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.fragments)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.fragments {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.fragments {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CoreTextNotification {
        CoreTextNotification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CoreTextFragment>>(
                "fragments",
                |m: &CoreTextNotification| { &m.fragments },
                |m: &mut CoreTextNotification| { &mut m.fragments },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CoreTextNotification>(
                "CoreTextNotification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CoreTextNotification {
        static instance: ::protobuf::rt::LazyV2<CoreTextNotification> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CoreTextNotification::new)
    }
}

impl ::protobuf::Clear for CoreTextNotification {
    fn clear(&mut self) {
        self.fragments.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CoreTextNotification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CoreTextNotification {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CoreErrorNotification {
    // message fields
    code: ::std::option::Option<CoreErrorNotification_ErrorCode>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CoreErrorNotification {
    fn default() -> &'a CoreErrorNotification {
        <CoreErrorNotification as ::protobuf::Message>::default_instance()
    }
}

impl CoreErrorNotification {
    pub fn new() -> CoreErrorNotification {
        ::std::default::Default::default()
    }

    // required .dfproto.CoreErrorNotification.ErrorCode code = 1;


    pub fn get_code(&self) -> CoreErrorNotification_ErrorCode {
        self.code.unwrap_or(CoreErrorNotification_ErrorCode::CR_LINK_FAILURE)
    }
    pub fn clear_code(&mut self) {
        self.code = ::std::option::Option::None;
    }

    pub fn has_code(&self) -> bool {
        self.code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: CoreErrorNotification_ErrorCode) {
        self.code = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CoreErrorNotification {
    fn is_initialized(&self) -> bool {
        if self.code.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.code, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.code {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.code {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CoreErrorNotification {
        CoreErrorNotification::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CoreErrorNotification_ErrorCode>>(
                "code",
                |m: &CoreErrorNotification| { &m.code },
                |m: &mut CoreErrorNotification| { &mut m.code },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CoreErrorNotification>(
                "CoreErrorNotification",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CoreErrorNotification {
        static instance: ::protobuf::rt::LazyV2<CoreErrorNotification> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CoreErrorNotification::new)
    }
}

impl ::protobuf::Clear for CoreErrorNotification {
    fn clear(&mut self) {
        self.code = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CoreErrorNotification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CoreErrorNotification {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CoreErrorNotification_ErrorCode {
    CR_LINK_FAILURE = -3,
    CR_WOULD_BREAK = -2,
    CR_NOT_IMPLEMENTED = -1,
    CR_OK = 0,
    CR_FAILURE = 1,
    CR_WRONG_USAGE = 2,
    CR_NOT_FOUND = 3,
}

impl ::protobuf::ProtobufEnum for CoreErrorNotification_ErrorCode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CoreErrorNotification_ErrorCode> {
        match value {
            -3 => ::std::option::Option::Some(CoreErrorNotification_ErrorCode::CR_LINK_FAILURE),
            -2 => ::std::option::Option::Some(CoreErrorNotification_ErrorCode::CR_WOULD_BREAK),
            -1 => ::std::option::Option::Some(CoreErrorNotification_ErrorCode::CR_NOT_IMPLEMENTED),
            0 => ::std::option::Option::Some(CoreErrorNotification_ErrorCode::CR_OK),
            1 => ::std::option::Option::Some(CoreErrorNotification_ErrorCode::CR_FAILURE),
            2 => ::std::option::Option::Some(CoreErrorNotification_ErrorCode::CR_WRONG_USAGE),
            3 => ::std::option::Option::Some(CoreErrorNotification_ErrorCode::CR_NOT_FOUND),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CoreErrorNotification_ErrorCode] = &[
            CoreErrorNotification_ErrorCode::CR_LINK_FAILURE,
            CoreErrorNotification_ErrorCode::CR_WOULD_BREAK,
            CoreErrorNotification_ErrorCode::CR_NOT_IMPLEMENTED,
            CoreErrorNotification_ErrorCode::CR_OK,
            CoreErrorNotification_ErrorCode::CR_FAILURE,
            CoreErrorNotification_ErrorCode::CR_WRONG_USAGE,
            CoreErrorNotification_ErrorCode::CR_NOT_FOUND,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CoreErrorNotification_ErrorCode>("CoreErrorNotification.ErrorCode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CoreErrorNotification_ErrorCode {
}

// Note, `Default` is implemented although default value is not 0
impl ::std::default::Default for CoreErrorNotification_ErrorCode {
    fn default() -> Self {
        CoreErrorNotification_ErrorCode::CR_LINK_FAILURE
    }
}

impl ::protobuf::reflect::ProtobufValue for CoreErrorNotification_ErrorCode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EmptyMessage {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EmptyMessage {
    fn default() -> &'a EmptyMessage {
        <EmptyMessage as ::protobuf::Message>::default_instance()
    }
}

impl EmptyMessage {
    pub fn new() -> EmptyMessage {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for EmptyMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EmptyMessage {
        EmptyMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EmptyMessage>(
                "EmptyMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EmptyMessage {
        static instance: ::protobuf::rt::LazyV2<EmptyMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EmptyMessage::new)
    }
}

impl ::protobuf::Clear for EmptyMessage {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EmptyMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EmptyMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IntMessage {
    // message fields
    value: ::std::option::Option<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IntMessage {
    fn default() -> &'a IntMessage {
        <IntMessage as ::protobuf::Message>::default_instance()
    }
}

impl IntMessage {
    pub fn new() -> IntMessage {
        ::std::default::Default::default()
    }

    // required int32 value = 1;


    pub fn get_value(&self) -> i32 {
        self.value.unwrap_or(0)
    }
    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: i32) {
        self.value = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for IntMessage {
    fn is_initialized(&self) -> bool {
        if self.value.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.value = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.value {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.value {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IntMessage {
        IntMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "value",
                |m: &IntMessage| { &m.value },
                |m: &mut IntMessage| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IntMessage>(
                "IntMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static IntMessage {
        static instance: ::protobuf::rt::LazyV2<IntMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IntMessage::new)
    }
}

impl ::protobuf::Clear for IntMessage {
    fn clear(&mut self) {
        self.value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IntMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IntMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IntListMessage {
    // message fields
    pub value: ::std::vec::Vec<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IntListMessage {
    fn default() -> &'a IntListMessage {
        <IntListMessage as ::protobuf::Message>::default_instance()
    }
}

impl IntListMessage {
    pub fn new() -> IntListMessage {
        ::std::default::Default::default()
    }

    // repeated int32 value = 1;


    pub fn get_value(&self) -> &[i32] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<i32>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IntListMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.value {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.value {
            os.write_int32(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IntListMessage {
        IntListMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "value",
                |m: &IntListMessage| { &m.value },
                |m: &mut IntListMessage| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IntListMessage>(
                "IntListMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static IntListMessage {
        static instance: ::protobuf::rt::LazyV2<IntListMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IntListMessage::new)
    }
}

impl ::protobuf::Clear for IntListMessage {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IntListMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IntListMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StringMessage {
    // message fields
    value: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StringMessage {
    fn default() -> &'a StringMessage {
        <StringMessage as ::protobuf::Message>::default_instance()
    }
}

impl StringMessage {
    pub fn new() -> StringMessage {
        ::std::default::Default::default()
    }

    // required string value = 1;


    pub fn get_value(&self) -> &str {
        match self.value.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        self.value.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for StringMessage {
    fn is_initialized(&self) -> bool {
        if self.value.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.value.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.value.as_ref() {
            os.write_string(1, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StringMessage {
        StringMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &StringMessage| { &m.value },
                |m: &mut StringMessage| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StringMessage>(
                "StringMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StringMessage {
        static instance: ::protobuf::rt::LazyV2<StringMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StringMessage::new)
    }
}

impl ::protobuf::Clear for StringMessage {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StringMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StringMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StringListMessage {
    // message fields
    pub value: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StringListMessage {
    fn default() -> &'a StringListMessage {
        <StringListMessage as ::protobuf::Message>::default_instance()
    }
}

impl StringListMessage {
    pub fn new() -> StringListMessage {
        ::std::default::Default::default()
    }

    // repeated string value = 1;


    pub fn get_value(&self) -> &[::std::string::String] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    pub fn mut_value(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.value, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for StringListMessage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.value {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.value {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StringListMessage {
        StringListMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &StringListMessage| { &m.value },
                |m: &mut StringListMessage| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StringListMessage>(
                "StringListMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StringListMessage {
        static instance: ::protobuf::rt::LazyV2<StringListMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StringListMessage::new)
    }
}

impl ::protobuf::Clear for StringListMessage {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StringListMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StringListMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CoreBindRequest {
    // message fields
    method: ::protobuf::SingularField<::std::string::String>,
    input_msg: ::protobuf::SingularField<::std::string::String>,
    output_msg: ::protobuf::SingularField<::std::string::String>,
    plugin: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CoreBindRequest {
    fn default() -> &'a CoreBindRequest {
        <CoreBindRequest as ::protobuf::Message>::default_instance()
    }
}

impl CoreBindRequest {
    pub fn new() -> CoreBindRequest {
        ::std::default::Default::default()
    }

    // required string method = 1;


    pub fn get_method(&self) -> &str {
        match self.method.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_method(&mut self) {
        self.method.clear();
    }

    pub fn has_method(&self) -> bool {
        self.method.is_some()
    }

    // Param is passed by value, moved
    pub fn set_method(&mut self, v: ::std::string::String) {
        self.method = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_method(&mut self) -> &mut ::std::string::String {
        if self.method.is_none() {
            self.method.set_default();
        }
        self.method.as_mut().unwrap()
    }

    // Take field
    pub fn take_method(&mut self) -> ::std::string::String {
        self.method.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string input_msg = 2;


    pub fn get_input_msg(&self) -> &str {
        match self.input_msg.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_input_msg(&mut self) {
        self.input_msg.clear();
    }

    pub fn has_input_msg(&self) -> bool {
        self.input_msg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_input_msg(&mut self, v: ::std::string::String) {
        self.input_msg = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_input_msg(&mut self) -> &mut ::std::string::String {
        if self.input_msg.is_none() {
            self.input_msg.set_default();
        }
        self.input_msg.as_mut().unwrap()
    }

    // Take field
    pub fn take_input_msg(&mut self) -> ::std::string::String {
        self.input_msg.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string output_msg = 3;


    pub fn get_output_msg(&self) -> &str {
        match self.output_msg.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_output_msg(&mut self) {
        self.output_msg.clear();
    }

    pub fn has_output_msg(&self) -> bool {
        self.output_msg.is_some()
    }

    // Param is passed by value, moved
    pub fn set_output_msg(&mut self, v: ::std::string::String) {
        self.output_msg = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_output_msg(&mut self) -> &mut ::std::string::String {
        if self.output_msg.is_none() {
            self.output_msg.set_default();
        }
        self.output_msg.as_mut().unwrap()
    }

    // Take field
    pub fn take_output_msg(&mut self) -> ::std::string::String {
        self.output_msg.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string plugin = 4;


    pub fn get_plugin(&self) -> &str {
        match self.plugin.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_plugin(&mut self) {
        self.plugin.clear();
    }

    pub fn has_plugin(&self) -> bool {
        self.plugin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_plugin(&mut self, v: ::std::string::String) {
        self.plugin = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_plugin(&mut self) -> &mut ::std::string::String {
        if self.plugin.is_none() {
            self.plugin.set_default();
        }
        self.plugin.as_mut().unwrap()
    }

    // Take field
    pub fn take_plugin(&mut self) -> ::std::string::String {
        self.plugin.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for CoreBindRequest {
    fn is_initialized(&self) -> bool {
        if self.method.is_none() {
            return false;
        }
        if self.input_msg.is_none() {
            return false;
        }
        if self.output_msg.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.method)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.input_msg)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.output_msg)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.plugin)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.method.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.input_msg.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.output_msg.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.plugin.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.method.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.input_msg.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.output_msg.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.plugin.as_ref() {
            os.write_string(4, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CoreBindRequest {
        CoreBindRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "method",
                |m: &CoreBindRequest| { &m.method },
                |m: &mut CoreBindRequest| { &mut m.method },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "input_msg",
                |m: &CoreBindRequest| { &m.input_msg },
                |m: &mut CoreBindRequest| { &mut m.input_msg },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "output_msg",
                |m: &CoreBindRequest| { &m.output_msg },
                |m: &mut CoreBindRequest| { &mut m.output_msg },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "plugin",
                |m: &CoreBindRequest| { &m.plugin },
                |m: &mut CoreBindRequest| { &mut m.plugin },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CoreBindRequest>(
                "CoreBindRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CoreBindRequest {
        static instance: ::protobuf::rt::LazyV2<CoreBindRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CoreBindRequest::new)
    }
}

impl ::protobuf::Clear for CoreBindRequest {
    fn clear(&mut self) {
        self.method.clear();
        self.input_msg.clear();
        self.output_msg.clear();
        self.plugin.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CoreBindRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CoreBindRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CoreBindReply {
    // message fields
    assigned_id: ::std::option::Option<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CoreBindReply {
    fn default() -> &'a CoreBindReply {
        <CoreBindReply as ::protobuf::Message>::default_instance()
    }
}

impl CoreBindReply {
    pub fn new() -> CoreBindReply {
        ::std::default::Default::default()
    }

    // required int32 assigned_id = 1;


    pub fn get_assigned_id(&self) -> i32 {
        self.assigned_id.unwrap_or(0)
    }
    pub fn clear_assigned_id(&mut self) {
        self.assigned_id = ::std::option::Option::None;
    }

    pub fn has_assigned_id(&self) -> bool {
        self.assigned_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_assigned_id(&mut self, v: i32) {
        self.assigned_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for CoreBindReply {
    fn is_initialized(&self) -> bool {
        if self.assigned_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.assigned_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.assigned_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.assigned_id {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CoreBindReply {
        CoreBindReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "assigned_id",
                |m: &CoreBindReply| { &m.assigned_id },
                |m: &mut CoreBindReply| { &mut m.assigned_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CoreBindReply>(
                "CoreBindReply",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CoreBindReply {
        static instance: ::protobuf::rt::LazyV2<CoreBindReply> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CoreBindReply::new)
    }
}

impl ::protobuf::Clear for CoreBindReply {
    fn clear(&mut self) {
        self.assigned_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CoreBindReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CoreBindReply {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CoreRunCommandRequest {
    // message fields
    command: ::protobuf::SingularField<::std::string::String>,
    pub arguments: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CoreRunCommandRequest {
    fn default() -> &'a CoreRunCommandRequest {
        <CoreRunCommandRequest as ::protobuf::Message>::default_instance()
    }
}

impl CoreRunCommandRequest {
    pub fn new() -> CoreRunCommandRequest {
        ::std::default::Default::default()
    }

    // required string command = 1;


    pub fn get_command(&self) -> &str {
        match self.command.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_command(&mut self) {
        self.command.clear();
    }

    pub fn has_command(&self) -> bool {
        self.command.is_some()
    }

    // Param is passed by value, moved
    pub fn set_command(&mut self, v: ::std::string::String) {
        self.command = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_command(&mut self) -> &mut ::std::string::String {
        if self.command.is_none() {
            self.command.set_default();
        }
        self.command.as_mut().unwrap()
    }

    // Take field
    pub fn take_command(&mut self) -> ::std::string::String {
        self.command.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated string arguments = 2;


    pub fn get_arguments(&self) -> &[::std::string::String] {
        &self.arguments
    }
    pub fn clear_arguments(&mut self) {
        self.arguments.clear();
    }

    // Param is passed by value, moved
    pub fn set_arguments(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.arguments = v;
    }

    // Mutable pointer to the field.
    pub fn mut_arguments(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.arguments
    }

    // Take field
    pub fn take_arguments(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.arguments, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CoreRunCommandRequest {
    fn is_initialized(&self) -> bool {
        if self.command.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.command)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.arguments)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.command.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        for value in &self.arguments {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.command.as_ref() {
            os.write_string(1, &v)?;
        }
        for v in &self.arguments {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CoreRunCommandRequest {
        CoreRunCommandRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "command",
                |m: &CoreRunCommandRequest| { &m.command },
                |m: &mut CoreRunCommandRequest| { &mut m.command },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "arguments",
                |m: &CoreRunCommandRequest| { &m.arguments },
                |m: &mut CoreRunCommandRequest| { &mut m.arguments },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CoreRunCommandRequest>(
                "CoreRunCommandRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CoreRunCommandRequest {
        static instance: ::protobuf::rt::LazyV2<CoreRunCommandRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CoreRunCommandRequest::new)
    }
}

impl ::protobuf::Clear for CoreRunCommandRequest {
    fn clear(&mut self) {
        self.command.clear();
        self.arguments.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CoreRunCommandRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CoreRunCommandRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CoreRunLuaRequest {
    // message fields
    module: ::protobuf::SingularField<::std::string::String>,
    function: ::protobuf::SingularField<::std::string::String>,
    pub arguments: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CoreRunLuaRequest {
    fn default() -> &'a CoreRunLuaRequest {
        <CoreRunLuaRequest as ::protobuf::Message>::default_instance()
    }
}

impl CoreRunLuaRequest {
    pub fn new() -> CoreRunLuaRequest {
        ::std::default::Default::default()
    }

    // required string module = 1;


    pub fn get_module(&self) -> &str {
        match self.module.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_module(&mut self) {
        self.module.clear();
    }

    pub fn has_module(&self) -> bool {
        self.module.is_some()
    }

    // Param is passed by value, moved
    pub fn set_module(&mut self, v: ::std::string::String) {
        self.module = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_module(&mut self) -> &mut ::std::string::String {
        if self.module.is_none() {
            self.module.set_default();
        }
        self.module.as_mut().unwrap()
    }

    // Take field
    pub fn take_module(&mut self) -> ::std::string::String {
        self.module.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string function = 2;


    pub fn get_function(&self) -> &str {
        match self.function.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_function(&mut self) {
        self.function.clear();
    }

    pub fn has_function(&self) -> bool {
        self.function.is_some()
    }

    // Param is passed by value, moved
    pub fn set_function(&mut self, v: ::std::string::String) {
        self.function = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_function(&mut self) -> &mut ::std::string::String {
        if self.function.is_none() {
            self.function.set_default();
        }
        self.function.as_mut().unwrap()
    }

    // Take field
    pub fn take_function(&mut self) -> ::std::string::String {
        self.function.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated string arguments = 3;


    pub fn get_arguments(&self) -> &[::std::string::String] {
        &self.arguments
    }
    pub fn clear_arguments(&mut self) {
        self.arguments.clear();
    }

    // Param is passed by value, moved
    pub fn set_arguments(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.arguments = v;
    }

    // Mutable pointer to the field.
    pub fn mut_arguments(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.arguments
    }

    // Take field
    pub fn take_arguments(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.arguments, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CoreRunLuaRequest {
    fn is_initialized(&self) -> bool {
        if self.module.is_none() {
            return false;
        }
        if self.function.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.module)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.function)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.arguments)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.module.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.function.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        for value in &self.arguments {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.module.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.function.as_ref() {
            os.write_string(2, &v)?;
        }
        for v in &self.arguments {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CoreRunLuaRequest {
        CoreRunLuaRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "module",
                |m: &CoreRunLuaRequest| { &m.module },
                |m: &mut CoreRunLuaRequest| { &mut m.module },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "function",
                |m: &CoreRunLuaRequest| { &m.function },
                |m: &mut CoreRunLuaRequest| { &mut m.function },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "arguments",
                |m: &CoreRunLuaRequest| { &m.arguments },
                |m: &mut CoreRunLuaRequest| { &mut m.arguments },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CoreRunLuaRequest>(
                "CoreRunLuaRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CoreRunLuaRequest {
        static instance: ::protobuf::rt::LazyV2<CoreRunLuaRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CoreRunLuaRequest::new)
    }
}

impl ::protobuf::Clear for CoreRunLuaRequest {
    fn clear(&mut self) {
        self.module.clear();
        self.function.clear();
        self.arguments.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CoreRunLuaRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CoreRunLuaRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12CoreProtocol.proto\x12\x07dfproto\"\x97\x03\n\x10CoreTextFragment\
    \x12\x14\n\x04text\x18\x01\x20\x02(\tR\x04textB\0\x127\n\x05color\x18\
    \x02\x20\x01(\x0e2\x1f.dfproto.CoreTextFragment.ColorR\x05colorB\0\"\xb1\
    \x02\n\x05Color\x12\x0f\n\x0bCOLOR_BLACK\x10\0\x12\x0e\n\nCOLOR_BLUE\x10\
    \x01\x12\x0f\n\x0bCOLOR_GREEN\x10\x02\x12\x0e\n\nCOLOR_CYAN\x10\x03\x12\
    \r\n\tCOLOR_RED\x10\x04\x12\x11\n\rCOLOR_MAGENTA\x10\x05\x12\x0f\n\x0bCO\
    LOR_BROWN\x10\x06\x12\x0e\n\nCOLOR_GREY\x10\x07\x12\x12\n\x0eCOLOR_DARKG\
    REY\x10\x08\x12\x13\n\x0fCOLOR_LIGHTBLUE\x10\t\x12\x14\n\x10COLOR_LIGHTG\
    REEN\x10\n\x12\x13\n\x0fCOLOR_LIGHTCYAN\x10\x0b\x12\x12\n\x0eCOLOR_LIGHT\
    RED\x10\x0c\x12\x16\n\x12COLOR_LIGHTMAGENTA\x10\r\x12\x10\n\x0cCOLOR_YEL\
    LOW\x10\x0e\x12\x0f\n\x0bCOLOR_WHITE\x10\x0f\x1a\0:\0\"S\n\x14CoreTextNo\
    tification\x129\n\tfragments\x18\x01\x20\x03(\x0b2\x19.dfproto.CoreTextF\
    ragmentR\tfragmentsB\0:\0\"\x86\x02\n\x15CoreErrorNotification\x12>\n\
    \x04code\x18\x01\x20\x02(\x0e2(.dfproto.CoreErrorNotification.ErrorCodeR\
    \x04codeB\0\"\xaa\x01\n\tErrorCode\x12\x1c\n\x0fCR_LINK_FAILURE\x10\xfd\
    \xff\xff\xff\xff\xff\xff\xff\xff\x01\x12\x1b\n\x0eCR_WOULD_BREAK\x10\xfe\
    \xff\xff\xff\xff\xff\xff\xff\xff\x01\x12\x1f\n\x12CR_NOT_IMPLEMENTED\x10\
    \xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x12\t\n\x05CR_OK\x10\0\x12\x0e\
    \n\nCR_FAILURE\x10\x01\x12\x12\n\x0eCR_WRONG_USAGE\x10\x02\x12\x10\n\x0c\
    CR_NOT_FOUND\x10\x03\x1a\0:\0\"\x10\n\x0cEmptyMessage:\0\"&\n\nIntMessag\
    e\x12\x16\n\x05value\x18\x01\x20\x02(\x05R\x05valueB\0:\0\"*\n\x0eIntLis\
    tMessage\x12\x16\n\x05value\x18\x01\x20\x03(\x05R\x05valueB\0:\0\")\n\rS\
    tringMessage\x12\x16\n\x05value\x18\x01\x20\x02(\tR\x05valueB\0:\0\"-\n\
    \x11StringListMessage\x12\x16\n\x05value\x18\x01\x20\x03(\tR\x05valueB\0\
    :\0\"\x87\x01\n\x0fCoreBindRequest\x12\x18\n\x06method\x18\x01\x20\x02(\
    \tR\x06methodB\0\x12\x1d\n\tinput_msg\x18\x02\x20\x02(\tR\x08inputMsgB\0\
    \x12\x1f\n\noutput_msg\x18\x03\x20\x02(\tR\toutputMsgB\0\x12\x18\n\x06pl\
    ugin\x18\x04\x20\x01(\tR\x06pluginB\0:\0\"4\n\rCoreBindReply\x12!\n\x0ba\
    ssigned_id\x18\x01\x20\x02(\x05R\nassignedIdB\0:\0\"U\n\x15CoreRunComman\
    dRequest\x12\x1a\n\x07command\x18\x01\x20\x02(\tR\x07commandB\0\x12\x1e\
    \n\targuments\x18\x02\x20\x03(\tR\targumentsB\0:\0\"m\n\x11CoreRunLuaReq\
    uest\x12\x18\n\x06module\x18\x01\x20\x02(\tR\x06moduleB\0\x12\x1c\n\x08f\
    unction\x18\x02\x20\x02(\tR\x08functionB\0\x12\x1e\n\targuments\x18\x03\
    \x20\x03(\tR\targumentsB\0:\0B\0b\x06proto2\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
