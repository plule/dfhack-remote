// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `AdventureControl.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct MoveCommandParams {
    // message fields
    pub direction: ::protobuf::SingularPtrField<super::RemoteFortressReader::Coord>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MoveCommandParams {
    fn default() -> &'a MoveCommandParams {
        <MoveCommandParams as ::protobuf::Message>::default_instance()
    }
}

impl MoveCommandParams {
    pub fn new() -> MoveCommandParams {
        ::std::default::Default::default()
    }

    // optional .RemoteFortressReader.Coord direction = 1;


    pub fn get_direction(&self) -> &super::RemoteFortressReader::Coord {
        self.direction.as_ref().unwrap_or_else(|| <super::RemoteFortressReader::Coord as ::protobuf::Message>::default_instance())
    }
    pub fn clear_direction(&mut self) {
        self.direction.clear();
    }

    pub fn has_direction(&self) -> bool {
        self.direction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_direction(&mut self, v: super::RemoteFortressReader::Coord) {
        self.direction = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_direction(&mut self) -> &mut super::RemoteFortressReader::Coord {
        if self.direction.is_none() {
            self.direction.set_default();
        }
        self.direction.as_mut().unwrap()
    }

    // Take field
    pub fn take_direction(&mut self) -> super::RemoteFortressReader::Coord {
        self.direction.take().unwrap_or_else(|| super::RemoteFortressReader::Coord::new())
    }
}

impl ::protobuf::Message for MoveCommandParams {
    fn is_initialized(&self) -> bool {
        for v in &self.direction {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.direction)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.direction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.direction.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MoveCommandParams {
        MoveCommandParams::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::RemoteFortressReader::Coord>>(
                "direction",
                |m: &MoveCommandParams| { &m.direction },
                |m: &mut MoveCommandParams| { &mut m.direction },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MoveCommandParams>(
                "MoveCommandParams",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MoveCommandParams {
        static instance: ::protobuf::rt::LazyV2<MoveCommandParams> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MoveCommandParams::new)
    }
}

impl ::protobuf::Clear for MoveCommandParams {
    fn clear(&mut self) {
        self.direction.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MoveCommandParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MoveCommandParams {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MovementOption {
    // message fields
    pub dest: ::protobuf::SingularPtrField<super::RemoteFortressReader::Coord>,
    pub source: ::protobuf::SingularPtrField<super::RemoteFortressReader::Coord>,
    pub grab: ::protobuf::SingularPtrField<super::RemoteFortressReader::Coord>,
    movement_type: ::std::option::Option<CarefulMovementType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MovementOption {
    fn default() -> &'a MovementOption {
        <MovementOption as ::protobuf::Message>::default_instance()
    }
}

impl MovementOption {
    pub fn new() -> MovementOption {
        ::std::default::Default::default()
    }

    // optional .RemoteFortressReader.Coord dest = 1;


    pub fn get_dest(&self) -> &super::RemoteFortressReader::Coord {
        self.dest.as_ref().unwrap_or_else(|| <super::RemoteFortressReader::Coord as ::protobuf::Message>::default_instance())
    }
    pub fn clear_dest(&mut self) {
        self.dest.clear();
    }

    pub fn has_dest(&self) -> bool {
        self.dest.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dest(&mut self, v: super::RemoteFortressReader::Coord) {
        self.dest = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dest(&mut self) -> &mut super::RemoteFortressReader::Coord {
        if self.dest.is_none() {
            self.dest.set_default();
        }
        self.dest.as_mut().unwrap()
    }

    // Take field
    pub fn take_dest(&mut self) -> super::RemoteFortressReader::Coord {
        self.dest.take().unwrap_or_else(|| super::RemoteFortressReader::Coord::new())
    }

    // optional .RemoteFortressReader.Coord source = 2;


    pub fn get_source(&self) -> &super::RemoteFortressReader::Coord {
        self.source.as_ref().unwrap_or_else(|| <super::RemoteFortressReader::Coord as ::protobuf::Message>::default_instance())
    }
    pub fn clear_source(&mut self) {
        self.source.clear();
    }

    pub fn has_source(&self) -> bool {
        self.source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: super::RemoteFortressReader::Coord) {
        self.source = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source(&mut self) -> &mut super::RemoteFortressReader::Coord {
        if self.source.is_none() {
            self.source.set_default();
        }
        self.source.as_mut().unwrap()
    }

    // Take field
    pub fn take_source(&mut self) -> super::RemoteFortressReader::Coord {
        self.source.take().unwrap_or_else(|| super::RemoteFortressReader::Coord::new())
    }

    // optional .RemoteFortressReader.Coord grab = 3;


    pub fn get_grab(&self) -> &super::RemoteFortressReader::Coord {
        self.grab.as_ref().unwrap_or_else(|| <super::RemoteFortressReader::Coord as ::protobuf::Message>::default_instance())
    }
    pub fn clear_grab(&mut self) {
        self.grab.clear();
    }

    pub fn has_grab(&self) -> bool {
        self.grab.is_some()
    }

    // Param is passed by value, moved
    pub fn set_grab(&mut self, v: super::RemoteFortressReader::Coord) {
        self.grab = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grab(&mut self) -> &mut super::RemoteFortressReader::Coord {
        if self.grab.is_none() {
            self.grab.set_default();
        }
        self.grab.as_mut().unwrap()
    }

    // Take field
    pub fn take_grab(&mut self) -> super::RemoteFortressReader::Coord {
        self.grab.take().unwrap_or_else(|| super::RemoteFortressReader::Coord::new())
    }

    // optional .AdventureControl.CarefulMovementType movement_type = 4;


    pub fn get_movement_type(&self) -> CarefulMovementType {
        self.movement_type.unwrap_or(CarefulMovementType::DEFAULT_MOVEMENT)
    }
    pub fn clear_movement_type(&mut self) {
        self.movement_type = ::std::option::Option::None;
    }

    pub fn has_movement_type(&self) -> bool {
        self.movement_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_movement_type(&mut self, v: CarefulMovementType) {
        self.movement_type = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for MovementOption {
    fn is_initialized(&self) -> bool {
        for v in &self.dest {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.source {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.grab {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.dest)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.source)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.grab)?;
                },
                4 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.movement_type, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.dest.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.source.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.grab.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.movement_type {
            my_size += ::protobuf::rt::enum_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.dest.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.source.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.grab.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.movement_type {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MovementOption {
        MovementOption::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::RemoteFortressReader::Coord>>(
                "dest",
                |m: &MovementOption| { &m.dest },
                |m: &mut MovementOption| { &mut m.dest },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::RemoteFortressReader::Coord>>(
                "source",
                |m: &MovementOption| { &m.source },
                |m: &mut MovementOption| { &mut m.source },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::RemoteFortressReader::Coord>>(
                "grab",
                |m: &MovementOption| { &m.grab },
                |m: &mut MovementOption| { &mut m.grab },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CarefulMovementType>>(
                "movement_type",
                |m: &MovementOption| { &m.movement_type },
                |m: &mut MovementOption| { &mut m.movement_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MovementOption>(
                "MovementOption",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MovementOption {
        static instance: ::protobuf::rt::LazyV2<MovementOption> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MovementOption::new)
    }
}

impl ::protobuf::Clear for MovementOption {
    fn clear(&mut self) {
        self.dest.clear();
        self.source.clear();
        self.grab.clear();
        self.movement_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MovementOption {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MovementOption {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MenuContents {
    // message fields
    current_menu: ::std::option::Option<AdvmodeMenu>,
    pub movements: ::protobuf::RepeatedField<MovementOption>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MenuContents {
    fn default() -> &'a MenuContents {
        <MenuContents as ::protobuf::Message>::default_instance()
    }
}

impl MenuContents {
    pub fn new() -> MenuContents {
        ::std::default::Default::default()
    }

    // optional .AdventureControl.AdvmodeMenu current_menu = 1;


    pub fn get_current_menu(&self) -> AdvmodeMenu {
        self.current_menu.unwrap_or(AdvmodeMenu::Default)
    }
    pub fn clear_current_menu(&mut self) {
        self.current_menu = ::std::option::Option::None;
    }

    pub fn has_current_menu(&self) -> bool {
        self.current_menu.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_menu(&mut self, v: AdvmodeMenu) {
        self.current_menu = ::std::option::Option::Some(v);
    }

    // repeated .AdventureControl.MovementOption movements = 2;


    pub fn get_movements(&self) -> &[MovementOption] {
        &self.movements
    }
    pub fn clear_movements(&mut self) {
        self.movements.clear();
    }

    // Param is passed by value, moved
    pub fn set_movements(&mut self, v: ::protobuf::RepeatedField<MovementOption>) {
        self.movements = v;
    }

    // Mutable pointer to the field.
    pub fn mut_movements(&mut self) -> &mut ::protobuf::RepeatedField<MovementOption> {
        &mut self.movements
    }

    // Take field
    pub fn take_movements(&mut self) -> ::protobuf::RepeatedField<MovementOption> {
        ::std::mem::replace(&mut self.movements, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MenuContents {
    fn is_initialized(&self) -> bool {
        for v in &self.movements {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.current_menu, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.movements)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.current_menu {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        for value in &self.movements {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.current_menu {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        for v in &self.movements {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MenuContents {
        MenuContents::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<AdvmodeMenu>>(
                "current_menu",
                |m: &MenuContents| { &m.current_menu },
                |m: &mut MenuContents| { &mut m.current_menu },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MovementOption>>(
                "movements",
                |m: &MenuContents| { &m.movements },
                |m: &mut MenuContents| { &mut m.movements },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MenuContents>(
                "MenuContents",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MenuContents {
        static instance: ::protobuf::rt::LazyV2<MenuContents> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MenuContents::new)
    }
}

impl ::protobuf::Clear for MenuContents {
    fn clear(&mut self) {
        self.current_menu = ::std::option::Option::None;
        self.movements.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MenuContents {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MenuContents {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MiscMoveParams {
    // message fields
    field_type: ::std::option::Option<MiscMoveType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MiscMoveParams {
    fn default() -> &'a MiscMoveParams {
        <MiscMoveParams as ::protobuf::Message>::default_instance()
    }
}

impl MiscMoveParams {
    pub fn new() -> MiscMoveParams {
        ::std::default::Default::default()
    }

    // optional .AdventureControl.MiscMoveType type = 1;


    pub fn get_field_type(&self) -> MiscMoveType {
        self.field_type.unwrap_or(MiscMoveType::SET_CLIMB)
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: MiscMoveType) {
        self.field_type = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for MiscMoveParams {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_type {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MiscMoveParams {
        MiscMoveParams::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MiscMoveType>>(
                "type",
                |m: &MiscMoveParams| { &m.field_type },
                |m: &mut MiscMoveParams| { &mut m.field_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MiscMoveParams>(
                "MiscMoveParams",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MiscMoveParams {
        static instance: ::protobuf::rt::LazyV2<MiscMoveParams> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MiscMoveParams::new)
    }
}

impl ::protobuf::Clear for MiscMoveParams {
    fn clear(&mut self) {
        self.field_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MiscMoveParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MiscMoveParams {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum AdvmodeMenu {
    Default = 0,
    Look = 1,
    ConversationAddress = 2,
    ConversationSelect = 3,
    ConversationSpeak = 4,
    Inventory = 5,
    Drop = 6,
    ThrowItem = 7,
    Wear = 8,
    Remove = 9,
    Interact = 10,
    Put = 11,
    PutContainer = 12,
    Eat = 13,
    ThrowAim = 14,
    Fire = 15,
    Get = 16,
    Unk17 = 17,
    CombatPrefs = 18,
    Companions = 19,
    MovementPrefs = 20,
    SpeedPrefs = 21,
    InteractAction = 22,
    MoveCarefully = 23,
    Announcements = 24,
    UseBuilding = 25,
    Travel = 26,
    Unk27 = 27,
    Unk28 = 28,
    SleepConfirm = 29,
    SelectInteractionTarget = 30,
    Unk31 = 31,
    Unk32 = 32,
    FallAction = 33,
    ViewTracks = 34,
    Jump = 35,
    Unk36 = 36,
    AttackConfirm = 37,
    AttackType = 38,
    AttackBodypart = 39,
    AttackStrike = 40,
    Unk41 = 41,
    Unk42 = 42,
    DodgeDirection = 43,
    Unk44 = 44,
    Unk45 = 45,
    Build = 46,
}

impl ::protobuf::ProtobufEnum for AdvmodeMenu {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AdvmodeMenu> {
        match value {
            0 => ::std::option::Option::Some(AdvmodeMenu::Default),
            1 => ::std::option::Option::Some(AdvmodeMenu::Look),
            2 => ::std::option::Option::Some(AdvmodeMenu::ConversationAddress),
            3 => ::std::option::Option::Some(AdvmodeMenu::ConversationSelect),
            4 => ::std::option::Option::Some(AdvmodeMenu::ConversationSpeak),
            5 => ::std::option::Option::Some(AdvmodeMenu::Inventory),
            6 => ::std::option::Option::Some(AdvmodeMenu::Drop),
            7 => ::std::option::Option::Some(AdvmodeMenu::ThrowItem),
            8 => ::std::option::Option::Some(AdvmodeMenu::Wear),
            9 => ::std::option::Option::Some(AdvmodeMenu::Remove),
            10 => ::std::option::Option::Some(AdvmodeMenu::Interact),
            11 => ::std::option::Option::Some(AdvmodeMenu::Put),
            12 => ::std::option::Option::Some(AdvmodeMenu::PutContainer),
            13 => ::std::option::Option::Some(AdvmodeMenu::Eat),
            14 => ::std::option::Option::Some(AdvmodeMenu::ThrowAim),
            15 => ::std::option::Option::Some(AdvmodeMenu::Fire),
            16 => ::std::option::Option::Some(AdvmodeMenu::Get),
            17 => ::std::option::Option::Some(AdvmodeMenu::Unk17),
            18 => ::std::option::Option::Some(AdvmodeMenu::CombatPrefs),
            19 => ::std::option::Option::Some(AdvmodeMenu::Companions),
            20 => ::std::option::Option::Some(AdvmodeMenu::MovementPrefs),
            21 => ::std::option::Option::Some(AdvmodeMenu::SpeedPrefs),
            22 => ::std::option::Option::Some(AdvmodeMenu::InteractAction),
            23 => ::std::option::Option::Some(AdvmodeMenu::MoveCarefully),
            24 => ::std::option::Option::Some(AdvmodeMenu::Announcements),
            25 => ::std::option::Option::Some(AdvmodeMenu::UseBuilding),
            26 => ::std::option::Option::Some(AdvmodeMenu::Travel),
            27 => ::std::option::Option::Some(AdvmodeMenu::Unk27),
            28 => ::std::option::Option::Some(AdvmodeMenu::Unk28),
            29 => ::std::option::Option::Some(AdvmodeMenu::SleepConfirm),
            30 => ::std::option::Option::Some(AdvmodeMenu::SelectInteractionTarget),
            31 => ::std::option::Option::Some(AdvmodeMenu::Unk31),
            32 => ::std::option::Option::Some(AdvmodeMenu::Unk32),
            33 => ::std::option::Option::Some(AdvmodeMenu::FallAction),
            34 => ::std::option::Option::Some(AdvmodeMenu::ViewTracks),
            35 => ::std::option::Option::Some(AdvmodeMenu::Jump),
            36 => ::std::option::Option::Some(AdvmodeMenu::Unk36),
            37 => ::std::option::Option::Some(AdvmodeMenu::AttackConfirm),
            38 => ::std::option::Option::Some(AdvmodeMenu::AttackType),
            39 => ::std::option::Option::Some(AdvmodeMenu::AttackBodypart),
            40 => ::std::option::Option::Some(AdvmodeMenu::AttackStrike),
            41 => ::std::option::Option::Some(AdvmodeMenu::Unk41),
            42 => ::std::option::Option::Some(AdvmodeMenu::Unk42),
            43 => ::std::option::Option::Some(AdvmodeMenu::DodgeDirection),
            44 => ::std::option::Option::Some(AdvmodeMenu::Unk44),
            45 => ::std::option::Option::Some(AdvmodeMenu::Unk45),
            46 => ::std::option::Option::Some(AdvmodeMenu::Build),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [AdvmodeMenu] = &[
            AdvmodeMenu::Default,
            AdvmodeMenu::Look,
            AdvmodeMenu::ConversationAddress,
            AdvmodeMenu::ConversationSelect,
            AdvmodeMenu::ConversationSpeak,
            AdvmodeMenu::Inventory,
            AdvmodeMenu::Drop,
            AdvmodeMenu::ThrowItem,
            AdvmodeMenu::Wear,
            AdvmodeMenu::Remove,
            AdvmodeMenu::Interact,
            AdvmodeMenu::Put,
            AdvmodeMenu::PutContainer,
            AdvmodeMenu::Eat,
            AdvmodeMenu::ThrowAim,
            AdvmodeMenu::Fire,
            AdvmodeMenu::Get,
            AdvmodeMenu::Unk17,
            AdvmodeMenu::CombatPrefs,
            AdvmodeMenu::Companions,
            AdvmodeMenu::MovementPrefs,
            AdvmodeMenu::SpeedPrefs,
            AdvmodeMenu::InteractAction,
            AdvmodeMenu::MoveCarefully,
            AdvmodeMenu::Announcements,
            AdvmodeMenu::UseBuilding,
            AdvmodeMenu::Travel,
            AdvmodeMenu::Unk27,
            AdvmodeMenu::Unk28,
            AdvmodeMenu::SleepConfirm,
            AdvmodeMenu::SelectInteractionTarget,
            AdvmodeMenu::Unk31,
            AdvmodeMenu::Unk32,
            AdvmodeMenu::FallAction,
            AdvmodeMenu::ViewTracks,
            AdvmodeMenu::Jump,
            AdvmodeMenu::Unk36,
            AdvmodeMenu::AttackConfirm,
            AdvmodeMenu::AttackType,
            AdvmodeMenu::AttackBodypart,
            AdvmodeMenu::AttackStrike,
            AdvmodeMenu::Unk41,
            AdvmodeMenu::Unk42,
            AdvmodeMenu::DodgeDirection,
            AdvmodeMenu::Unk44,
            AdvmodeMenu::Unk45,
            AdvmodeMenu::Build,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<AdvmodeMenu>("AdvmodeMenu", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for AdvmodeMenu {
}

impl ::std::default::Default for AdvmodeMenu {
    fn default() -> Self {
        AdvmodeMenu::Default
    }
}

impl ::protobuf::reflect::ProtobufValue for AdvmodeMenu {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CarefulMovementType {
    DEFAULT_MOVEMENT = 0,
    RELEASE_ITEM_HOLD = 1,
    RELEASE_TILE_HOLD = 2,
    ATTACK_CREATURE = 3,
    HOLD_TILE = 4,
    MOVE = 5,
    CLIMB = 6,
    HOLD_ITEM = 7,
    BUILDING_INTERACT = 8,
    ITEM_INTERACT = 9,
    ITEM_INTERACT_GUIDE = 10,
    ITEM_INTERACT_RIDE = 11,
    ITEM_INTERACT_PUSH = 12,
}

impl ::protobuf::ProtobufEnum for CarefulMovementType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CarefulMovementType> {
        match value {
            0 => ::std::option::Option::Some(CarefulMovementType::DEFAULT_MOVEMENT),
            1 => ::std::option::Option::Some(CarefulMovementType::RELEASE_ITEM_HOLD),
            2 => ::std::option::Option::Some(CarefulMovementType::RELEASE_TILE_HOLD),
            3 => ::std::option::Option::Some(CarefulMovementType::ATTACK_CREATURE),
            4 => ::std::option::Option::Some(CarefulMovementType::HOLD_TILE),
            5 => ::std::option::Option::Some(CarefulMovementType::MOVE),
            6 => ::std::option::Option::Some(CarefulMovementType::CLIMB),
            7 => ::std::option::Option::Some(CarefulMovementType::HOLD_ITEM),
            8 => ::std::option::Option::Some(CarefulMovementType::BUILDING_INTERACT),
            9 => ::std::option::Option::Some(CarefulMovementType::ITEM_INTERACT),
            10 => ::std::option::Option::Some(CarefulMovementType::ITEM_INTERACT_GUIDE),
            11 => ::std::option::Option::Some(CarefulMovementType::ITEM_INTERACT_RIDE),
            12 => ::std::option::Option::Some(CarefulMovementType::ITEM_INTERACT_PUSH),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CarefulMovementType] = &[
            CarefulMovementType::DEFAULT_MOVEMENT,
            CarefulMovementType::RELEASE_ITEM_HOLD,
            CarefulMovementType::RELEASE_TILE_HOLD,
            CarefulMovementType::ATTACK_CREATURE,
            CarefulMovementType::HOLD_TILE,
            CarefulMovementType::MOVE,
            CarefulMovementType::CLIMB,
            CarefulMovementType::HOLD_ITEM,
            CarefulMovementType::BUILDING_INTERACT,
            CarefulMovementType::ITEM_INTERACT,
            CarefulMovementType::ITEM_INTERACT_GUIDE,
            CarefulMovementType::ITEM_INTERACT_RIDE,
            CarefulMovementType::ITEM_INTERACT_PUSH,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CarefulMovementType>("CarefulMovementType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CarefulMovementType {
}

impl ::std::default::Default for CarefulMovementType {
    fn default() -> Self {
        CarefulMovementType::DEFAULT_MOVEMENT
    }
}

impl ::protobuf::reflect::ProtobufValue for CarefulMovementType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MiscMoveType {
    SET_CLIMB = 0,
    SET_STAND = 1,
    SET_CANCEL = 2,
}

impl ::protobuf::ProtobufEnum for MiscMoveType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MiscMoveType> {
        match value {
            0 => ::std::option::Option::Some(MiscMoveType::SET_CLIMB),
            1 => ::std::option::Option::Some(MiscMoveType::SET_STAND),
            2 => ::std::option::Option::Some(MiscMoveType::SET_CANCEL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MiscMoveType] = &[
            MiscMoveType::SET_CLIMB,
            MiscMoveType::SET_STAND,
            MiscMoveType::SET_CANCEL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<MiscMoveType>("MiscMoveType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for MiscMoveType {
}

impl ::std::default::Default for MiscMoveType {
    fn default() -> Self {
        MiscMoveType::SET_CLIMB
    }
}

impl ::protobuf::reflect::ProtobufValue for MiscMoveType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16AdventureControl.proto\x12\x10AdventureControl\x1a\x1aRemoteFortre\
    ssReader.proto\"R\n\x11MoveCommandParams\x12;\n\tdirection\x18\x01\x20\
    \x01(\x0b2\x1b.RemoteFortressReader.CoordR\tdirectionB\0:\0\"\xfd\x01\n\
    \x0eMovementOption\x121\n\x04dest\x18\x01\x20\x01(\x0b2\x1b.RemoteFortre\
    ssReader.CoordR\x04destB\0\x125\n\x06source\x18\x02\x20\x01(\x0b2\x1b.Re\
    moteFortressReader.CoordR\x06sourceB\0\x121\n\x04grab\x18\x03\x20\x01(\
    \x0b2\x1b.RemoteFortressReader.CoordR\x04grabB\0\x12L\n\rmovement_type\
    \x18\x04\x20\x01(\x0e2%.AdventureControl.CarefulMovementTypeR\x0cmovemen\
    tTypeB\0:\0\"\x96\x01\n\x0cMenuContents\x12B\n\x0ccurrent_menu\x18\x01\
    \x20\x01(\x0e2\x1d.AdventureControl.AdvmodeMenuR\x0bcurrentMenuB\0\x12@\
    \n\tmovements\x18\x02\x20\x03(\x0b2\x20.AdventureControl.MovementOptionR\
    \tmovementsB\0:\0\"H\n\x0eMiscMoveParams\x124\n\x04type\x18\x01\x20\x01(\
    \x0e2\x1e.AdventureControl.MiscMoveTypeR\x04typeB\0:\0*\xc9\x05\n\x0bAdv\
    modeMenu\x12\x0b\n\x07Default\x10\0\x12\x08\n\x04Look\x10\x01\x12\x17\n\
    \x13ConversationAddress\x10\x02\x12\x16\n\x12ConversationSelect\x10\x03\
    \x12\x15\n\x11ConversationSpeak\x10\x04\x12\r\n\tInventory\x10\x05\x12\
    \x08\n\x04Drop\x10\x06\x12\r\n\tThrowItem\x10\x07\x12\x08\n\x04Wear\x10\
    \x08\x12\n\n\x06Remove\x10\t\x12\x0c\n\x08Interact\x10\n\x12\x07\n\x03Pu\
    t\x10\x0b\x12\x10\n\x0cPutContainer\x10\x0c\x12\x07\n\x03Eat\x10\r\x12\
    \x0c\n\x08ThrowAim\x10\x0e\x12\x08\n\x04Fire\x10\x0f\x12\x07\n\x03Get\
    \x10\x10\x12\t\n\x05Unk17\x10\x11\x12\x0f\n\x0bCombatPrefs\x10\x12\x12\
    \x0e\n\nCompanions\x10\x13\x12\x11\n\rMovementPrefs\x10\x14\x12\x0e\n\nS\
    peedPrefs\x10\x15\x12\x12\n\x0eInteractAction\x10\x16\x12\x11\n\rMoveCar\
    efully\x10\x17\x12\x11\n\rAnnouncements\x10\x18\x12\x0f\n\x0bUseBuilding\
    \x10\x19\x12\n\n\x06Travel\x10\x1a\x12\t\n\x05Unk27\x10\x1b\x12\t\n\x05U\
    nk28\x10\x1c\x12\x10\n\x0cSleepConfirm\x10\x1d\x12\x1b\n\x17SelectIntera\
    ctionTarget\x10\x1e\x12\t\n\x05Unk31\x10\x1f\x12\t\n\x05Unk32\x10\x20\
    \x12\x0e\n\nFallAction\x10!\x12\x0e\n\nViewTracks\x10\"\x12\x08\n\x04Jum\
    p\x10#\x12\t\n\x05Unk36\x10$\x12\x11\n\rAttackConfirm\x10%\x12\x0e\n\nAt\
    tackType\x10&\x12\x12\n\x0eAttackBodypart\x10'\x12\x10\n\x0cAttackStrike\
    \x10(\x12\t\n\x05Unk41\x10)\x12\t\n\x05Unk42\x10*\x12\x12\n\x0eDodgeDire\
    ction\x10+\x12\t\n\x05Unk44\x10,\x12\t\n\x05Unk45\x10-\x12\t\n\x05Build\
    \x10.\x1a\0*\x96\x02\n\x13CarefulMovementType\x12\x14\n\x10DEFAULT_MOVEM\
    ENT\x10\0\x12\x15\n\x11RELEASE_ITEM_HOLD\x10\x01\x12\x15\n\x11RELEASE_TI\
    LE_HOLD\x10\x02\x12\x13\n\x0fATTACK_CREATURE\x10\x03\x12\r\n\tHOLD_TILE\
    \x10\x04\x12\x08\n\x04MOVE\x10\x05\x12\t\n\x05CLIMB\x10\x06\x12\r\n\tHOL\
    D_ITEM\x10\x07\x12\x15\n\x11BUILDING_INTERACT\x10\x08\x12\x11\n\rITEM_IN\
    TERACT\x10\t\x12\x17\n\x13ITEM_INTERACT_GUIDE\x10\n\x12\x16\n\x12ITEM_IN\
    TERACT_RIDE\x10\x0b\x12\x16\n\x12ITEM_INTERACT_PUSH\x10\x0c\x1a\0*>\n\
    \x0cMiscMoveType\x12\r\n\tSET_CLIMB\x10\0\x12\r\n\tSET_STAND\x10\x01\x12\
    \x0e\n\nSET_CANCEL\x10\x02\x1a\0B\0b\x06proto2\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
