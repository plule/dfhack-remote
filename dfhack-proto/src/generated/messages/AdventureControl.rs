// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `AdventureControl.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:AdventureControl.MoveCommandParams)
pub struct MoveCommandParams {
    // message fields
    // @@protoc_insertion_point(field:AdventureControl.MoveCommandParams.direction)
    pub direction: ::protobuf::MessageField<super::RemoteFortressReader::Coord>,
    // special fields
    // @@protoc_insertion_point(special_field:AdventureControl.MoveCommandParams.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MoveCommandParams {
    fn default() -> &'a MoveCommandParams {
        <MoveCommandParams as ::protobuf::Message>::default_instance()
    }
}

impl MoveCommandParams {
    pub fn new() -> MoveCommandParams {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RemoteFortressReader::Coord>(
            "direction",
            |m: &MoveCommandParams| { &m.direction },
            |m: &mut MoveCommandParams| { &mut m.direction },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MoveCommandParams>(
            "MoveCommandParams",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MoveCommandParams {
    const NAME: &'static str = "MoveCommandParams";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.direction)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.direction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.direction.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MoveCommandParams {
        MoveCommandParams::new()
    }

    fn clear(&mut self) {
        self.direction.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MoveCommandParams {
        static instance: MoveCommandParams = MoveCommandParams {
            direction: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MoveCommandParams {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MoveCommandParams").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MoveCommandParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MoveCommandParams {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:AdventureControl.MovementOption)
pub struct MovementOption {
    // message fields
    // @@protoc_insertion_point(field:AdventureControl.MovementOption.dest)
    pub dest: ::protobuf::MessageField<super::RemoteFortressReader::Coord>,
    // @@protoc_insertion_point(field:AdventureControl.MovementOption.source)
    pub source: ::protobuf::MessageField<super::RemoteFortressReader::Coord>,
    // @@protoc_insertion_point(field:AdventureControl.MovementOption.grab)
    pub grab: ::protobuf::MessageField<super::RemoteFortressReader::Coord>,
    // @@protoc_insertion_point(field:AdventureControl.MovementOption.movement_type)
    pub movement_type: ::std::option::Option<::protobuf::EnumOrUnknown<CarefulMovementType>>,
    // special fields
    // @@protoc_insertion_point(special_field:AdventureControl.MovementOption.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MovementOption {
    fn default() -> &'a MovementOption {
        <MovementOption as ::protobuf::Message>::default_instance()
    }
}

impl MovementOption {
    pub fn new() -> MovementOption {
        ::std::default::Default::default()
    }

    // optional .AdventureControl.CarefulMovementType movement_type = 4;

    pub fn movement_type(&self) -> CarefulMovementType {
        match self.movement_type {
            Some(e) => e.enum_value_or(CarefulMovementType::DEFAULT_MOVEMENT),
            None => CarefulMovementType::DEFAULT_MOVEMENT,
        }
    }

    pub fn clear_movement_type(&mut self) {
        self.movement_type = ::std::option::Option::None;
    }

    pub fn has_movement_type(&self) -> bool {
        self.movement_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_movement_type(&mut self, v: CarefulMovementType) {
        self.movement_type = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RemoteFortressReader::Coord>(
            "dest",
            |m: &MovementOption| { &m.dest },
            |m: &mut MovementOption| { &mut m.dest },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RemoteFortressReader::Coord>(
            "source",
            |m: &MovementOption| { &m.source },
            |m: &mut MovementOption| { &mut m.source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RemoteFortressReader::Coord>(
            "grab",
            |m: &MovementOption| { &m.grab },
            |m: &mut MovementOption| { &mut m.grab },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "movement_type",
            |m: &MovementOption| { &m.movement_type },
            |m: &mut MovementOption| { &mut m.movement_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MovementOption>(
            "MovementOption",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MovementOption {
    const NAME: &'static str = "MovementOption";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.dest)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.source)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.grab)?;
                },
                32 => {
                    self.movement_type = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.dest.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.source.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.grab.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.movement_type {
            my_size += ::protobuf::rt::int32_size(4, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.dest.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.source.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.grab.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.movement_type {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MovementOption {
        MovementOption::new()
    }

    fn clear(&mut self) {
        self.dest.clear();
        self.source.clear();
        self.grab.clear();
        self.movement_type = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MovementOption {
        static instance: MovementOption = MovementOption {
            dest: ::protobuf::MessageField::none(),
            source: ::protobuf::MessageField::none(),
            grab: ::protobuf::MessageField::none(),
            movement_type: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MovementOption {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MovementOption").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MovementOption {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MovementOption {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:AdventureControl.MenuContents)
pub struct MenuContents {
    // message fields
    // @@protoc_insertion_point(field:AdventureControl.MenuContents.current_menu)
    pub current_menu: ::std::option::Option<::protobuf::EnumOrUnknown<AdvmodeMenu>>,
    // @@protoc_insertion_point(field:AdventureControl.MenuContents.movements)
    pub movements: ::std::vec::Vec<MovementOption>,
    // special fields
    // @@protoc_insertion_point(special_field:AdventureControl.MenuContents.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MenuContents {
    fn default() -> &'a MenuContents {
        <MenuContents as ::protobuf::Message>::default_instance()
    }
}

impl MenuContents {
    pub fn new() -> MenuContents {
        ::std::default::Default::default()
    }

    // optional .AdventureControl.AdvmodeMenu current_menu = 1;

    pub fn current_menu(&self) -> AdvmodeMenu {
        match self.current_menu {
            Some(e) => e.enum_value_or(AdvmodeMenu::Default),
            None => AdvmodeMenu::Default,
        }
    }

    pub fn clear_current_menu(&mut self) {
        self.current_menu = ::std::option::Option::None;
    }

    pub fn has_current_menu(&self) -> bool {
        self.current_menu.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_menu(&mut self, v: AdvmodeMenu) {
        self.current_menu = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "current_menu",
            |m: &MenuContents| { &m.current_menu },
            |m: &mut MenuContents| { &mut m.current_menu },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "movements",
            |m: &MenuContents| { &m.movements },
            |m: &mut MenuContents| { &mut m.movements },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MenuContents>(
            "MenuContents",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MenuContents {
    const NAME: &'static str = "MenuContents";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.current_menu = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    self.movements.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.current_menu {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        for value in &self.movements {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.current_menu {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        for v in &self.movements {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MenuContents {
        MenuContents::new()
    }

    fn clear(&mut self) {
        self.current_menu = ::std::option::Option::None;
        self.movements.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MenuContents {
        static instance: MenuContents = MenuContents {
            current_menu: ::std::option::Option::None,
            movements: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MenuContents {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MenuContents").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MenuContents {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MenuContents {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:AdventureControl.MiscMoveParams)
pub struct MiscMoveParams {
    // message fields
    // @@protoc_insertion_point(field:AdventureControl.MiscMoveParams.type)
    pub type_: ::std::option::Option<::protobuf::EnumOrUnknown<MiscMoveType>>,
    // special fields
    // @@protoc_insertion_point(special_field:AdventureControl.MiscMoveParams.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MiscMoveParams {
    fn default() -> &'a MiscMoveParams {
        <MiscMoveParams as ::protobuf::Message>::default_instance()
    }
}

impl MiscMoveParams {
    pub fn new() -> MiscMoveParams {
        ::std::default::Default::default()
    }

    // optional .AdventureControl.MiscMoveType type = 1;

    pub fn type_(&self) -> MiscMoveType {
        match self.type_ {
            Some(e) => e.enum_value_or(MiscMoveType::SET_CLIMB),
            None => MiscMoveType::SET_CLIMB,
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: MiscMoveType) {
        self.type_ = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &MiscMoveParams| { &m.type_ },
            |m: &mut MiscMoveParams| { &mut m.type_ },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MiscMoveParams>(
            "MiscMoveParams",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MiscMoveParams {
    const NAME: &'static str = "MiscMoveParams";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_ {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_ {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MiscMoveParams {
        MiscMoveParams::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MiscMoveParams {
        static instance: MiscMoveParams = MiscMoveParams {
            type_: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MiscMoveParams {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MiscMoveParams").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MiscMoveParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MiscMoveParams {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:AdventureControl.AdvmodeMenu)
pub enum AdvmodeMenu {
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Default)
    Default = 0,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Look)
    Look = 1,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.ConversationAddress)
    ConversationAddress = 2,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.ConversationSelect)
    ConversationSelect = 3,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.ConversationSpeak)
    ConversationSpeak = 4,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Inventory)
    Inventory = 5,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Drop)
    Drop = 6,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.ThrowItem)
    ThrowItem = 7,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Wear)
    Wear = 8,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Remove)
    Remove = 9,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Interact)
    Interact = 10,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Put)
    Put = 11,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.PutContainer)
    PutContainer = 12,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Eat)
    Eat = 13,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.ThrowAim)
    ThrowAim = 14,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Fire)
    Fire = 15,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Get)
    Get = 16,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Unk17)
    Unk17 = 17,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.CombatPrefs)
    CombatPrefs = 18,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Companions)
    Companions = 19,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.MovementPrefs)
    MovementPrefs = 20,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.SpeedPrefs)
    SpeedPrefs = 21,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.InteractAction)
    InteractAction = 22,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.MoveCarefully)
    MoveCarefully = 23,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Announcements)
    Announcements = 24,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.UseBuilding)
    UseBuilding = 25,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Travel)
    Travel = 26,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Unk27)
    Unk27 = 27,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Unk28)
    Unk28 = 28,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.SleepConfirm)
    SleepConfirm = 29,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.SelectInteractionTarget)
    SelectInteractionTarget = 30,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Unk31)
    Unk31 = 31,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Unk32)
    Unk32 = 32,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.FallAction)
    FallAction = 33,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.ViewTracks)
    ViewTracks = 34,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Jump)
    Jump = 35,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Unk36)
    Unk36 = 36,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.AttackConfirm)
    AttackConfirm = 37,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.AttackType)
    AttackType = 38,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.AttackBodypart)
    AttackBodypart = 39,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.AttackStrike)
    AttackStrike = 40,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Unk41)
    Unk41 = 41,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Unk42)
    Unk42 = 42,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.DodgeDirection)
    DodgeDirection = 43,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Unk44)
    Unk44 = 44,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Unk45)
    Unk45 = 45,
    // @@protoc_insertion_point(enum_value:AdventureControl.AdvmodeMenu.Build)
    Build = 46,
}

impl ::protobuf::Enum for AdvmodeMenu {
    const NAME: &'static str = "AdvmodeMenu";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AdvmodeMenu> {
        match value {
            0 => ::std::option::Option::Some(AdvmodeMenu::Default),
            1 => ::std::option::Option::Some(AdvmodeMenu::Look),
            2 => ::std::option::Option::Some(AdvmodeMenu::ConversationAddress),
            3 => ::std::option::Option::Some(AdvmodeMenu::ConversationSelect),
            4 => ::std::option::Option::Some(AdvmodeMenu::ConversationSpeak),
            5 => ::std::option::Option::Some(AdvmodeMenu::Inventory),
            6 => ::std::option::Option::Some(AdvmodeMenu::Drop),
            7 => ::std::option::Option::Some(AdvmodeMenu::ThrowItem),
            8 => ::std::option::Option::Some(AdvmodeMenu::Wear),
            9 => ::std::option::Option::Some(AdvmodeMenu::Remove),
            10 => ::std::option::Option::Some(AdvmodeMenu::Interact),
            11 => ::std::option::Option::Some(AdvmodeMenu::Put),
            12 => ::std::option::Option::Some(AdvmodeMenu::PutContainer),
            13 => ::std::option::Option::Some(AdvmodeMenu::Eat),
            14 => ::std::option::Option::Some(AdvmodeMenu::ThrowAim),
            15 => ::std::option::Option::Some(AdvmodeMenu::Fire),
            16 => ::std::option::Option::Some(AdvmodeMenu::Get),
            17 => ::std::option::Option::Some(AdvmodeMenu::Unk17),
            18 => ::std::option::Option::Some(AdvmodeMenu::CombatPrefs),
            19 => ::std::option::Option::Some(AdvmodeMenu::Companions),
            20 => ::std::option::Option::Some(AdvmodeMenu::MovementPrefs),
            21 => ::std::option::Option::Some(AdvmodeMenu::SpeedPrefs),
            22 => ::std::option::Option::Some(AdvmodeMenu::InteractAction),
            23 => ::std::option::Option::Some(AdvmodeMenu::MoveCarefully),
            24 => ::std::option::Option::Some(AdvmodeMenu::Announcements),
            25 => ::std::option::Option::Some(AdvmodeMenu::UseBuilding),
            26 => ::std::option::Option::Some(AdvmodeMenu::Travel),
            27 => ::std::option::Option::Some(AdvmodeMenu::Unk27),
            28 => ::std::option::Option::Some(AdvmodeMenu::Unk28),
            29 => ::std::option::Option::Some(AdvmodeMenu::SleepConfirm),
            30 => ::std::option::Option::Some(AdvmodeMenu::SelectInteractionTarget),
            31 => ::std::option::Option::Some(AdvmodeMenu::Unk31),
            32 => ::std::option::Option::Some(AdvmodeMenu::Unk32),
            33 => ::std::option::Option::Some(AdvmodeMenu::FallAction),
            34 => ::std::option::Option::Some(AdvmodeMenu::ViewTracks),
            35 => ::std::option::Option::Some(AdvmodeMenu::Jump),
            36 => ::std::option::Option::Some(AdvmodeMenu::Unk36),
            37 => ::std::option::Option::Some(AdvmodeMenu::AttackConfirm),
            38 => ::std::option::Option::Some(AdvmodeMenu::AttackType),
            39 => ::std::option::Option::Some(AdvmodeMenu::AttackBodypart),
            40 => ::std::option::Option::Some(AdvmodeMenu::AttackStrike),
            41 => ::std::option::Option::Some(AdvmodeMenu::Unk41),
            42 => ::std::option::Option::Some(AdvmodeMenu::Unk42),
            43 => ::std::option::Option::Some(AdvmodeMenu::DodgeDirection),
            44 => ::std::option::Option::Some(AdvmodeMenu::Unk44),
            45 => ::std::option::Option::Some(AdvmodeMenu::Unk45),
            46 => ::std::option::Option::Some(AdvmodeMenu::Build),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [AdvmodeMenu] = &[
        AdvmodeMenu::Default,
        AdvmodeMenu::Look,
        AdvmodeMenu::ConversationAddress,
        AdvmodeMenu::ConversationSelect,
        AdvmodeMenu::ConversationSpeak,
        AdvmodeMenu::Inventory,
        AdvmodeMenu::Drop,
        AdvmodeMenu::ThrowItem,
        AdvmodeMenu::Wear,
        AdvmodeMenu::Remove,
        AdvmodeMenu::Interact,
        AdvmodeMenu::Put,
        AdvmodeMenu::PutContainer,
        AdvmodeMenu::Eat,
        AdvmodeMenu::ThrowAim,
        AdvmodeMenu::Fire,
        AdvmodeMenu::Get,
        AdvmodeMenu::Unk17,
        AdvmodeMenu::CombatPrefs,
        AdvmodeMenu::Companions,
        AdvmodeMenu::MovementPrefs,
        AdvmodeMenu::SpeedPrefs,
        AdvmodeMenu::InteractAction,
        AdvmodeMenu::MoveCarefully,
        AdvmodeMenu::Announcements,
        AdvmodeMenu::UseBuilding,
        AdvmodeMenu::Travel,
        AdvmodeMenu::Unk27,
        AdvmodeMenu::Unk28,
        AdvmodeMenu::SleepConfirm,
        AdvmodeMenu::SelectInteractionTarget,
        AdvmodeMenu::Unk31,
        AdvmodeMenu::Unk32,
        AdvmodeMenu::FallAction,
        AdvmodeMenu::ViewTracks,
        AdvmodeMenu::Jump,
        AdvmodeMenu::Unk36,
        AdvmodeMenu::AttackConfirm,
        AdvmodeMenu::AttackType,
        AdvmodeMenu::AttackBodypart,
        AdvmodeMenu::AttackStrike,
        AdvmodeMenu::Unk41,
        AdvmodeMenu::Unk42,
        AdvmodeMenu::DodgeDirection,
        AdvmodeMenu::Unk44,
        AdvmodeMenu::Unk45,
        AdvmodeMenu::Build,
    ];
}

impl ::protobuf::EnumFull for AdvmodeMenu {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("AdvmodeMenu").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for AdvmodeMenu {
    fn default() -> Self {
        AdvmodeMenu::Default
    }
}

impl AdvmodeMenu {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<AdvmodeMenu>("AdvmodeMenu")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:AdventureControl.CarefulMovementType)
pub enum CarefulMovementType {
    // @@protoc_insertion_point(enum_value:AdventureControl.CarefulMovementType.DEFAULT_MOVEMENT)
    DEFAULT_MOVEMENT = 0,
    // @@protoc_insertion_point(enum_value:AdventureControl.CarefulMovementType.RELEASE_ITEM_HOLD)
    RELEASE_ITEM_HOLD = 1,
    // @@protoc_insertion_point(enum_value:AdventureControl.CarefulMovementType.RELEASE_TILE_HOLD)
    RELEASE_TILE_HOLD = 2,
    // @@protoc_insertion_point(enum_value:AdventureControl.CarefulMovementType.ATTACK_CREATURE)
    ATTACK_CREATURE = 3,
    // @@protoc_insertion_point(enum_value:AdventureControl.CarefulMovementType.HOLD_TILE)
    HOLD_TILE = 4,
    // @@protoc_insertion_point(enum_value:AdventureControl.CarefulMovementType.MOVE)
    MOVE = 5,
    // @@protoc_insertion_point(enum_value:AdventureControl.CarefulMovementType.CLIMB)
    CLIMB = 6,
    // @@protoc_insertion_point(enum_value:AdventureControl.CarefulMovementType.HOLD_ITEM)
    HOLD_ITEM = 7,
    // @@protoc_insertion_point(enum_value:AdventureControl.CarefulMovementType.BUILDING_INTERACT)
    BUILDING_INTERACT = 8,
    // @@protoc_insertion_point(enum_value:AdventureControl.CarefulMovementType.ITEM_INTERACT)
    ITEM_INTERACT = 9,
    // @@protoc_insertion_point(enum_value:AdventureControl.CarefulMovementType.ITEM_INTERACT_GUIDE)
    ITEM_INTERACT_GUIDE = 10,
    // @@protoc_insertion_point(enum_value:AdventureControl.CarefulMovementType.ITEM_INTERACT_RIDE)
    ITEM_INTERACT_RIDE = 11,
    // @@protoc_insertion_point(enum_value:AdventureControl.CarefulMovementType.ITEM_INTERACT_PUSH)
    ITEM_INTERACT_PUSH = 12,
}

impl ::protobuf::Enum for CarefulMovementType {
    const NAME: &'static str = "CarefulMovementType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CarefulMovementType> {
        match value {
            0 => ::std::option::Option::Some(CarefulMovementType::DEFAULT_MOVEMENT),
            1 => ::std::option::Option::Some(CarefulMovementType::RELEASE_ITEM_HOLD),
            2 => ::std::option::Option::Some(CarefulMovementType::RELEASE_TILE_HOLD),
            3 => ::std::option::Option::Some(CarefulMovementType::ATTACK_CREATURE),
            4 => ::std::option::Option::Some(CarefulMovementType::HOLD_TILE),
            5 => ::std::option::Option::Some(CarefulMovementType::MOVE),
            6 => ::std::option::Option::Some(CarefulMovementType::CLIMB),
            7 => ::std::option::Option::Some(CarefulMovementType::HOLD_ITEM),
            8 => ::std::option::Option::Some(CarefulMovementType::BUILDING_INTERACT),
            9 => ::std::option::Option::Some(CarefulMovementType::ITEM_INTERACT),
            10 => ::std::option::Option::Some(CarefulMovementType::ITEM_INTERACT_GUIDE),
            11 => ::std::option::Option::Some(CarefulMovementType::ITEM_INTERACT_RIDE),
            12 => ::std::option::Option::Some(CarefulMovementType::ITEM_INTERACT_PUSH),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [CarefulMovementType] = &[
        CarefulMovementType::DEFAULT_MOVEMENT,
        CarefulMovementType::RELEASE_ITEM_HOLD,
        CarefulMovementType::RELEASE_TILE_HOLD,
        CarefulMovementType::ATTACK_CREATURE,
        CarefulMovementType::HOLD_TILE,
        CarefulMovementType::MOVE,
        CarefulMovementType::CLIMB,
        CarefulMovementType::HOLD_ITEM,
        CarefulMovementType::BUILDING_INTERACT,
        CarefulMovementType::ITEM_INTERACT,
        CarefulMovementType::ITEM_INTERACT_GUIDE,
        CarefulMovementType::ITEM_INTERACT_RIDE,
        CarefulMovementType::ITEM_INTERACT_PUSH,
    ];
}

impl ::protobuf::EnumFull for CarefulMovementType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("CarefulMovementType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for CarefulMovementType {
    fn default() -> Self {
        CarefulMovementType::DEFAULT_MOVEMENT
    }
}

impl CarefulMovementType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<CarefulMovementType>("CarefulMovementType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:AdventureControl.MiscMoveType)
pub enum MiscMoveType {
    // @@protoc_insertion_point(enum_value:AdventureControl.MiscMoveType.SET_CLIMB)
    SET_CLIMB = 0,
    // @@protoc_insertion_point(enum_value:AdventureControl.MiscMoveType.SET_STAND)
    SET_STAND = 1,
    // @@protoc_insertion_point(enum_value:AdventureControl.MiscMoveType.SET_CANCEL)
    SET_CANCEL = 2,
}

impl ::protobuf::Enum for MiscMoveType {
    const NAME: &'static str = "MiscMoveType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MiscMoveType> {
        match value {
            0 => ::std::option::Option::Some(MiscMoveType::SET_CLIMB),
            1 => ::std::option::Option::Some(MiscMoveType::SET_STAND),
            2 => ::std::option::Option::Some(MiscMoveType::SET_CANCEL),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [MiscMoveType] = &[
        MiscMoveType::SET_CLIMB,
        MiscMoveType::SET_STAND,
        MiscMoveType::SET_CANCEL,
    ];
}

impl ::protobuf::EnumFull for MiscMoveType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("MiscMoveType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for MiscMoveType {
    fn default() -> Self {
        MiscMoveType::SET_CLIMB
    }
}

impl MiscMoveType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<MiscMoveType>("MiscMoveType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16AdventureControl.proto\x12\x10AdventureControl\x1a\x1aRemoteFortre\
    ssReader.proto\"N\n\x11MoveCommandParams\x129\n\tdirection\x18\x01\x20\
    \x01(\x0b2\x1b.RemoteFortressReader.CoordR\tdirection\"\xf3\x01\n\x0eMov\
    ementOption\x12/\n\x04dest\x18\x01\x20\x01(\x0b2\x1b.RemoteFortressReade\
    r.CoordR\x04dest\x123\n\x06source\x18\x02\x20\x01(\x0b2\x1b.RemoteFortre\
    ssReader.CoordR\x06source\x12/\n\x04grab\x18\x03\x20\x01(\x0b2\x1b.Remot\
    eFortressReader.CoordR\x04grab\x12J\n\rmovement_type\x18\x04\x20\x01(\
    \x0e2%.AdventureControl.CarefulMovementTypeR\x0cmovementType\"\x90\x01\n\
    \x0cMenuContents\x12@\n\x0ccurrent_menu\x18\x01\x20\x01(\x0e2\x1d.Advent\
    ureControl.AdvmodeMenuR\x0bcurrentMenu\x12>\n\tmovements\x18\x02\x20\x03\
    (\x0b2\x20.AdventureControl.MovementOptionR\tmovements\"D\n\x0eMiscMoveP\
    arams\x122\n\x04type\x18\x01\x20\x01(\x0e2\x1e.AdventureControl.MiscMove\
    TypeR\x04type*\xc7\x05\n\x0bAdvmodeMenu\x12\x0b\n\x07Default\x10\0\x12\
    \x08\n\x04Look\x10\x01\x12\x17\n\x13ConversationAddress\x10\x02\x12\x16\
    \n\x12ConversationSelect\x10\x03\x12\x15\n\x11ConversationSpeak\x10\x04\
    \x12\r\n\tInventory\x10\x05\x12\x08\n\x04Drop\x10\x06\x12\r\n\tThrowItem\
    \x10\x07\x12\x08\n\x04Wear\x10\x08\x12\n\n\x06Remove\x10\t\x12\x0c\n\x08\
    Interact\x10\n\x12\x07\n\x03Put\x10\x0b\x12\x10\n\x0cPutContainer\x10\
    \x0c\x12\x07\n\x03Eat\x10\r\x12\x0c\n\x08ThrowAim\x10\x0e\x12\x08\n\x04F\
    ire\x10\x0f\x12\x07\n\x03Get\x10\x10\x12\t\n\x05Unk17\x10\x11\x12\x0f\n\
    \x0bCombatPrefs\x10\x12\x12\x0e\n\nCompanions\x10\x13\x12\x11\n\rMovemen\
    tPrefs\x10\x14\x12\x0e\n\nSpeedPrefs\x10\x15\x12\x12\n\x0eInteractAction\
    \x10\x16\x12\x11\n\rMoveCarefully\x10\x17\x12\x11\n\rAnnouncements\x10\
    \x18\x12\x0f\n\x0bUseBuilding\x10\x19\x12\n\n\x06Travel\x10\x1a\x12\t\n\
    \x05Unk27\x10\x1b\x12\t\n\x05Unk28\x10\x1c\x12\x10\n\x0cSleepConfirm\x10\
    \x1d\x12\x1b\n\x17SelectInteractionTarget\x10\x1e\x12\t\n\x05Unk31\x10\
    \x1f\x12\t\n\x05Unk32\x10\x20\x12\x0e\n\nFallAction\x10!\x12\x0e\n\nView\
    Tracks\x10\"\x12\x08\n\x04Jump\x10#\x12\t\n\x05Unk36\x10$\x12\x11\n\rAtt\
    ackConfirm\x10%\x12\x0e\n\nAttackType\x10&\x12\x12\n\x0eAttackBodypart\
    \x10'\x12\x10\n\x0cAttackStrike\x10(\x12\t\n\x05Unk41\x10)\x12\t\n\x05Un\
    k42\x10*\x12\x12\n\x0eDodgeDirection\x10+\x12\t\n\x05Unk44\x10,\x12\t\n\
    \x05Unk45\x10-\x12\t\n\x05Build\x10.*\x94\x02\n\x13CarefulMovementType\
    \x12\x14\n\x10DEFAULT_MOVEMENT\x10\0\x12\x15\n\x11RELEASE_ITEM_HOLD\x10\
    \x01\x12\x15\n\x11RELEASE_TILE_HOLD\x10\x02\x12\x13\n\x0fATTACK_CREATURE\
    \x10\x03\x12\r\n\tHOLD_TILE\x10\x04\x12\x08\n\x04MOVE\x10\x05\x12\t\n\
    \x05CLIMB\x10\x06\x12\r\n\tHOLD_ITEM\x10\x07\x12\x15\n\x11BUILDING_INTER\
    ACT\x10\x08\x12\x11\n\rITEM_INTERACT\x10\t\x12\x17\n\x13ITEM_INTERACT_GU\
    IDE\x10\n\x12\x16\n\x12ITEM_INTERACT_RIDE\x10\x0b\x12\x16\n\x12ITEM_INTE\
    RACT_PUSH\x10\x0c*<\n\x0cMiscMoveType\x12\r\n\tSET_CLIMB\x10\0\x12\r\n\t\
    SET_STAND\x10\x01\x12\x0e\n\nSET_CANCEL\x10\x02B\x02H\x03b\x06proto2\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::RemoteFortressReader::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(4);
            messages.push(MoveCommandParams::generated_message_descriptor_data());
            messages.push(MovementOption::generated_message_descriptor_data());
            messages.push(MenuContents::generated_message_descriptor_data());
            messages.push(MiscMoveParams::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(3);
            enums.push(AdvmodeMenu::generated_enum_descriptor_data());
            enums.push(CarefulMovementType::generated_enum_descriptor_data());
            enums.push(MiscMoveType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
