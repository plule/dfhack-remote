// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `DwarfControl.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:DwarfControl.SidebarState)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SidebarState {
    // message fields
    // @@protoc_insertion_point(field:DwarfControl.SidebarState.mode)
    pub mode: ::std::option::Option<::protobuf::EnumOrUnknown<super::ui_sidebar_mode::Ui_sidebar_mode>>,
    // @@protoc_insertion_point(field:DwarfControl.SidebarState.menu_items)
    pub menu_items: ::std::vec::Vec<MenuItem>,
    // @@protoc_insertion_point(field:DwarfControl.SidebarState.build_selector)
    pub build_selector: ::protobuf::MessageField<BuildSelector>,
    // special fields
    // @@protoc_insertion_point(special_field:DwarfControl.SidebarState.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SidebarState {
    fn default() -> &'a SidebarState {
        <SidebarState as ::protobuf::Message>::default_instance()
    }
}

impl SidebarState {
    pub fn new() -> SidebarState {
        ::std::default::Default::default()
    }

    // optional .proto.enums.ui_sidebar_mode.ui_sidebar_mode mode = 1;

    pub fn mode(&self) -> super::ui_sidebar_mode::Ui_sidebar_mode {
        match self.mode {
            Some(e) => e.enum_value_or(super::ui_sidebar_mode::Ui_sidebar_mode::Default),
            None => super::ui_sidebar_mode::Ui_sidebar_mode::Default,
        }
    }

    pub fn clear_mode(&mut self) {
        self.mode = ::std::option::Option::None;
    }

    pub fn has_mode(&self) -> bool {
        self.mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: super::ui_sidebar_mode::Ui_sidebar_mode) {
        self.mode = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "mode",
            |m: &SidebarState| { &m.mode },
            |m: &mut SidebarState| { &mut m.mode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "menu_items",
            |m: &SidebarState| { &m.menu_items },
            |m: &mut SidebarState| { &mut m.menu_items },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BuildSelector>(
            "build_selector",
            |m: &SidebarState| { &m.build_selector },
            |m: &mut SidebarState| { &mut m.build_selector },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SidebarState>(
            "SidebarState",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SidebarState {
    const NAME: &'static str = "SidebarState";

    fn is_initialized(&self) -> bool {
        for v in &self.menu_items {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.build_selector {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.mode = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    self.menu_items.push(is.read_message()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.build_selector)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.mode {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        for value in &self.menu_items {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.build_selector.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.mode {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        for v in &self.menu_items {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.build_selector.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SidebarState {
        SidebarState::new()
    }

    fn clear(&mut self) {
        self.mode = ::std::option::Option::None;
        self.menu_items.clear();
        self.build_selector.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SidebarState {
        static instance: SidebarState = SidebarState {
            mode: ::std::option::Option::None,
            menu_items: ::std::vec::Vec::new(),
            build_selector: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SidebarState {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SidebarState").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SidebarState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SidebarState {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:DwarfControl.MenuItem)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MenuItem {
    // message fields
    // @@protoc_insertion_point(field:DwarfControl.MenuItem.building_type)
    pub building_type: ::protobuf::MessageField<super::RemoteFortressReader::BuildingType>,
    // @@protoc_insertion_point(field:DwarfControl.MenuItem.existing_count)
    pub existing_count: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:DwarfControl.MenuItem.build_category)
    pub build_category: ::std::option::Option<::protobuf::EnumOrUnknown<BuildCategory>>,
    // special fields
    // @@protoc_insertion_point(special_field:DwarfControl.MenuItem.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MenuItem {
    fn default() -> &'a MenuItem {
        <MenuItem as ::protobuf::Message>::default_instance()
    }
}

impl MenuItem {
    pub fn new() -> MenuItem {
        ::std::default::Default::default()
    }

    // optional int32 existing_count = 2;

    pub fn existing_count(&self) -> i32 {
        self.existing_count.unwrap_or(0)
    }

    pub fn clear_existing_count(&mut self) {
        self.existing_count = ::std::option::Option::None;
    }

    pub fn has_existing_count(&self) -> bool {
        self.existing_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_existing_count(&mut self, v: i32) {
        self.existing_count = ::std::option::Option::Some(v);
    }

    // optional .DwarfControl.BuildCategory build_category = 3;

    pub fn build_category(&self) -> BuildCategory {
        match self.build_category {
            Some(e) => e.enum_value_or(BuildCategory::NotCategory),
            None => BuildCategory::NotCategory,
        }
    }

    pub fn clear_build_category(&mut self) {
        self.build_category = ::std::option::Option::None;
    }

    pub fn has_build_category(&self) -> bool {
        self.build_category.is_some()
    }

    // Param is passed by value, moved
    pub fn set_build_category(&mut self, v: BuildCategory) {
        self.build_category = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RemoteFortressReader::BuildingType>(
            "building_type",
            |m: &MenuItem| { &m.building_type },
            |m: &mut MenuItem| { &mut m.building_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "existing_count",
            |m: &MenuItem| { &m.existing_count },
            |m: &mut MenuItem| { &mut m.existing_count },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "build_category",
            |m: &MenuItem| { &m.build_category },
            |m: &mut MenuItem| { &mut m.build_category },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MenuItem>(
            "MenuItem",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MenuItem {
    const NAME: &'static str = "MenuItem";

    fn is_initialized(&self) -> bool {
        for v in &self.building_type {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.building_type)?;
                },
                16 => {
                    self.existing_count = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.build_category = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.building_type.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.existing_count {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.build_category {
            my_size += ::protobuf::rt::int32_size(3, v.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.building_type.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.existing_count {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.build_category {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MenuItem {
        MenuItem::new()
    }

    fn clear(&mut self) {
        self.building_type.clear();
        self.existing_count = ::std::option::Option::None;
        self.build_category = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MenuItem {
        static instance: MenuItem = MenuItem {
            building_type: ::protobuf::MessageField::none(),
            existing_count: ::std::option::Option::None,
            build_category: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MenuItem {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MenuItem").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MenuItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MenuItem {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:DwarfControl.SidebarCommand)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SidebarCommand {
    // message fields
    // @@protoc_insertion_point(field:DwarfControl.SidebarCommand.mode)
    pub mode: ::std::option::Option<::protobuf::EnumOrUnknown<super::ui_sidebar_mode::Ui_sidebar_mode>>,
    // @@protoc_insertion_point(field:DwarfControl.SidebarCommand.menu_index)
    pub menu_index: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:DwarfControl.SidebarCommand.action)
    pub action: ::std::option::Option<::protobuf::EnumOrUnknown<MenuAction>>,
    // @@protoc_insertion_point(field:DwarfControl.SidebarCommand.selection_coord)
    pub selection_coord: ::protobuf::MessageField<super::RemoteFortressReader::Coord>,
    // special fields
    // @@protoc_insertion_point(special_field:DwarfControl.SidebarCommand.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SidebarCommand {
    fn default() -> &'a SidebarCommand {
        <SidebarCommand as ::protobuf::Message>::default_instance()
    }
}

impl SidebarCommand {
    pub fn new() -> SidebarCommand {
        ::std::default::Default::default()
    }

    // optional .proto.enums.ui_sidebar_mode.ui_sidebar_mode mode = 1;

    pub fn mode(&self) -> super::ui_sidebar_mode::Ui_sidebar_mode {
        match self.mode {
            Some(e) => e.enum_value_or(super::ui_sidebar_mode::Ui_sidebar_mode::Default),
            None => super::ui_sidebar_mode::Ui_sidebar_mode::Default,
        }
    }

    pub fn clear_mode(&mut self) {
        self.mode = ::std::option::Option::None;
    }

    pub fn has_mode(&self) -> bool {
        self.mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: super::ui_sidebar_mode::Ui_sidebar_mode) {
        self.mode = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional int32 menu_index = 2;

    pub fn menu_index(&self) -> i32 {
        self.menu_index.unwrap_or(0)
    }

    pub fn clear_menu_index(&mut self) {
        self.menu_index = ::std::option::Option::None;
    }

    pub fn has_menu_index(&self) -> bool {
        self.menu_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_menu_index(&mut self, v: i32) {
        self.menu_index = ::std::option::Option::Some(v);
    }

    // optional .DwarfControl.MenuAction action = 3;

    pub fn action(&self) -> MenuAction {
        match self.action {
            Some(e) => e.enum_value_or(MenuAction::MenuNone),
            None => MenuAction::MenuNone,
        }
    }

    pub fn clear_action(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_action(&self) -> bool {
        self.action.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: MenuAction) {
        self.action = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "mode",
            |m: &SidebarCommand| { &m.mode },
            |m: &mut SidebarCommand| { &mut m.mode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "menu_index",
            |m: &SidebarCommand| { &m.menu_index },
            |m: &mut SidebarCommand| { &mut m.menu_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "action",
            |m: &SidebarCommand| { &m.action },
            |m: &mut SidebarCommand| { &mut m.action },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RemoteFortressReader::Coord>(
            "selection_coord",
            |m: &SidebarCommand| { &m.selection_coord },
            |m: &mut SidebarCommand| { &mut m.selection_coord },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SidebarCommand>(
            "SidebarCommand",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SidebarCommand {
    const NAME: &'static str = "SidebarCommand";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.mode = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.menu_index = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.action = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.selection_coord)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.mode {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.menu_index {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.action {
            my_size += ::protobuf::rt::int32_size(3, v.value());
        }
        if let Some(v) = self.selection_coord.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.mode {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.menu_index {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.action {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.selection_coord.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SidebarCommand {
        SidebarCommand::new()
    }

    fn clear(&mut self) {
        self.mode = ::std::option::Option::None;
        self.menu_index = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.selection_coord.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SidebarCommand {
        static instance: SidebarCommand = SidebarCommand {
            mode: ::std::option::Option::None,
            menu_index: ::std::option::Option::None,
            action: ::std::option::Option::None,
            selection_coord: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SidebarCommand {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SidebarCommand").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SidebarCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SidebarCommand {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:DwarfControl.BuiildReqChoice)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BuiildReqChoice {
    // message fields
    // @@protoc_insertion_point(field:DwarfControl.BuiildReqChoice.distance)
    pub distance: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:DwarfControl.BuiildReqChoice.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:DwarfControl.BuiildReqChoice.num_candidates)
    pub num_candidates: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:DwarfControl.BuiildReqChoice.used_count)
    pub used_count: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:DwarfControl.BuiildReqChoice.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BuiildReqChoice {
    fn default() -> &'a BuiildReqChoice {
        <BuiildReqChoice as ::protobuf::Message>::default_instance()
    }
}

impl BuiildReqChoice {
    pub fn new() -> BuiildReqChoice {
        ::std::default::Default::default()
    }

    // optional int32 distance = 1;

    pub fn distance(&self) -> i32 {
        self.distance.unwrap_or(0)
    }

    pub fn clear_distance(&mut self) {
        self.distance = ::std::option::Option::None;
    }

    pub fn has_distance(&self) -> bool {
        self.distance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_distance(&mut self, v: i32) {
        self.distance = ::std::option::Option::Some(v);
    }

    // optional string name = 2;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 num_candidates = 3;

    pub fn num_candidates(&self) -> i32 {
        self.num_candidates.unwrap_or(0)
    }

    pub fn clear_num_candidates(&mut self) {
        self.num_candidates = ::std::option::Option::None;
    }

    pub fn has_num_candidates(&self) -> bool {
        self.num_candidates.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_candidates(&mut self, v: i32) {
        self.num_candidates = ::std::option::Option::Some(v);
    }

    // optional int32 used_count = 4;

    pub fn used_count(&self) -> i32 {
        self.used_count.unwrap_or(0)
    }

    pub fn clear_used_count(&mut self) {
        self.used_count = ::std::option::Option::None;
    }

    pub fn has_used_count(&self) -> bool {
        self.used_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_used_count(&mut self, v: i32) {
        self.used_count = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "distance",
            |m: &BuiildReqChoice| { &m.distance },
            |m: &mut BuiildReqChoice| { &mut m.distance },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &BuiildReqChoice| { &m.name },
            |m: &mut BuiildReqChoice| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "num_candidates",
            |m: &BuiildReqChoice| { &m.num_candidates },
            |m: &mut BuiildReqChoice| { &mut m.num_candidates },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "used_count",
            |m: &BuiildReqChoice| { &m.used_count },
            |m: &mut BuiildReqChoice| { &mut m.used_count },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BuiildReqChoice>(
            "BuiildReqChoice",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BuiildReqChoice {
    const NAME: &'static str = "BuiildReqChoice";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.distance = ::std::option::Option::Some(is.read_int32()?);
                },
                18 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.num_candidates = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.used_count = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.distance {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.num_candidates {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.used_count {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.distance {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.name.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.num_candidates {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.used_count {
            os.write_int32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BuiildReqChoice {
        BuiildReqChoice::new()
    }

    fn clear(&mut self) {
        self.distance = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.num_candidates = ::std::option::Option::None;
        self.used_count = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BuiildReqChoice {
        static instance: BuiildReqChoice = BuiildReqChoice {
            distance: ::std::option::Option::None,
            name: ::std::option::Option::None,
            num_candidates: ::std::option::Option::None,
            used_count: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BuiildReqChoice {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BuiildReqChoice").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BuiildReqChoice {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BuiildReqChoice {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:DwarfControl.BuildItemReq)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BuildItemReq {
    // message fields
    // @@protoc_insertion_point(field:DwarfControl.BuildItemReq.count_required)
    pub count_required: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:DwarfControl.BuildItemReq.count_max)
    pub count_max: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:DwarfControl.BuildItemReq.count_provided)
    pub count_provided: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:DwarfControl.BuildItemReq.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BuildItemReq {
    fn default() -> &'a BuildItemReq {
        <BuildItemReq as ::protobuf::Message>::default_instance()
    }
}

impl BuildItemReq {
    pub fn new() -> BuildItemReq {
        ::std::default::Default::default()
    }

    // optional int32 count_required = 2;

    pub fn count_required(&self) -> i32 {
        self.count_required.unwrap_or(0)
    }

    pub fn clear_count_required(&mut self) {
        self.count_required = ::std::option::Option::None;
    }

    pub fn has_count_required(&self) -> bool {
        self.count_required.is_some()
    }

    // Param is passed by value, moved
    pub fn set_count_required(&mut self, v: i32) {
        self.count_required = ::std::option::Option::Some(v);
    }

    // optional int32 count_max = 3;

    pub fn count_max(&self) -> i32 {
        self.count_max.unwrap_or(0)
    }

    pub fn clear_count_max(&mut self) {
        self.count_max = ::std::option::Option::None;
    }

    pub fn has_count_max(&self) -> bool {
        self.count_max.is_some()
    }

    // Param is passed by value, moved
    pub fn set_count_max(&mut self, v: i32) {
        self.count_max = ::std::option::Option::Some(v);
    }

    // optional int32 count_provided = 4;

    pub fn count_provided(&self) -> i32 {
        self.count_provided.unwrap_or(0)
    }

    pub fn clear_count_provided(&mut self) {
        self.count_provided = ::std::option::Option::None;
    }

    pub fn has_count_provided(&self) -> bool {
        self.count_provided.is_some()
    }

    // Param is passed by value, moved
    pub fn set_count_provided(&mut self, v: i32) {
        self.count_provided = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "count_required",
            |m: &BuildItemReq| { &m.count_required },
            |m: &mut BuildItemReq| { &mut m.count_required },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "count_max",
            |m: &BuildItemReq| { &m.count_max },
            |m: &mut BuildItemReq| { &mut m.count_max },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "count_provided",
            |m: &BuildItemReq| { &m.count_provided },
            |m: &mut BuildItemReq| { &mut m.count_provided },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BuildItemReq>(
            "BuildItemReq",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BuildItemReq {
    const NAME: &'static str = "BuildItemReq";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.count_required = ::std::option::Option::Some(is.read_int32()?);
                },
                24 => {
                    self.count_max = ::std::option::Option::Some(is.read_int32()?);
                },
                32 => {
                    self.count_provided = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.count_required {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let Some(v) = self.count_max {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.count_provided {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.count_required {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.count_max {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.count_provided {
            os.write_int32(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BuildItemReq {
        BuildItemReq::new()
    }

    fn clear(&mut self) {
        self.count_required = ::std::option::Option::None;
        self.count_max = ::std::option::Option::None;
        self.count_provided = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BuildItemReq {
        static instance: BuildItemReq = BuildItemReq {
            count_required: ::std::option::Option::None,
            count_max: ::std::option::Option::None,
            count_provided: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BuildItemReq {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BuildItemReq").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BuildItemReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BuildItemReq {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:DwarfControl.BuildSelector)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BuildSelector {
    // message fields
    // @@protoc_insertion_point(field:DwarfControl.BuildSelector.building_type)
    pub building_type: ::protobuf::MessageField<super::RemoteFortressReader::BuildingType>,
    // @@protoc_insertion_point(field:DwarfControl.BuildSelector.stage)
    pub stage: ::std::option::Option<::protobuf::EnumOrUnknown<BuildSelectorStage>>,
    // @@protoc_insertion_point(field:DwarfControl.BuildSelector.choices)
    pub choices: ::std::vec::Vec<BuiildReqChoice>,
    // @@protoc_insertion_point(field:DwarfControl.BuildSelector.sel_index)
    pub sel_index: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:DwarfControl.BuildSelector.requirements)
    pub requirements: ::std::vec::Vec<BuildItemReq>,
    // @@protoc_insertion_point(field:DwarfControl.BuildSelector.req_index)
    pub req_index: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:DwarfControl.BuildSelector.errors)
    pub errors: ::std::vec::Vec<::std::string::String>,
    // @@protoc_insertion_point(field:DwarfControl.BuildSelector.radius_x_low)
    pub radius_x_low: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:DwarfControl.BuildSelector.radius_y_low)
    pub radius_y_low: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:DwarfControl.BuildSelector.radius_x_high)
    pub radius_x_high: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:DwarfControl.BuildSelector.radius_y_high)
    pub radius_y_high: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:DwarfControl.BuildSelector.cursor)
    pub cursor: ::protobuf::MessageField<super::RemoteFortressReader::Coord>,
    // @@protoc_insertion_point(field:DwarfControl.BuildSelector.tiles)
    pub tiles: ::std::vec::Vec<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:DwarfControl.BuildSelector.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BuildSelector {
    fn default() -> &'a BuildSelector {
        <BuildSelector as ::protobuf::Message>::default_instance()
    }
}

impl BuildSelector {
    pub fn new() -> BuildSelector {
        ::std::default::Default::default()
    }

    // optional .DwarfControl.BuildSelectorStage stage = 2;

    pub fn stage(&self) -> BuildSelectorStage {
        match self.stage {
            Some(e) => e.enum_value_or(BuildSelectorStage::StageNoMat),
            None => BuildSelectorStage::StageNoMat,
        }
    }

    pub fn clear_stage(&mut self) {
        self.stage = ::std::option::Option::None;
    }

    pub fn has_stage(&self) -> bool {
        self.stage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stage(&mut self, v: BuildSelectorStage) {
        self.stage = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional int32 sel_index = 4;

    pub fn sel_index(&self) -> i32 {
        self.sel_index.unwrap_or(0)
    }

    pub fn clear_sel_index(&mut self) {
        self.sel_index = ::std::option::Option::None;
    }

    pub fn has_sel_index(&self) -> bool {
        self.sel_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sel_index(&mut self, v: i32) {
        self.sel_index = ::std::option::Option::Some(v);
    }

    // optional int32 req_index = 6;

    pub fn req_index(&self) -> i32 {
        self.req_index.unwrap_or(0)
    }

    pub fn clear_req_index(&mut self) {
        self.req_index = ::std::option::Option::None;
    }

    pub fn has_req_index(&self) -> bool {
        self.req_index.is_some()
    }

    // Param is passed by value, moved
    pub fn set_req_index(&mut self, v: i32) {
        self.req_index = ::std::option::Option::Some(v);
    }

    // optional int32 radius_x_low = 8;

    pub fn radius_x_low(&self) -> i32 {
        self.radius_x_low.unwrap_or(0)
    }

    pub fn clear_radius_x_low(&mut self) {
        self.radius_x_low = ::std::option::Option::None;
    }

    pub fn has_radius_x_low(&self) -> bool {
        self.radius_x_low.is_some()
    }

    // Param is passed by value, moved
    pub fn set_radius_x_low(&mut self, v: i32) {
        self.radius_x_low = ::std::option::Option::Some(v);
    }

    // optional int32 radius_y_low = 9;

    pub fn radius_y_low(&self) -> i32 {
        self.radius_y_low.unwrap_or(0)
    }

    pub fn clear_radius_y_low(&mut self) {
        self.radius_y_low = ::std::option::Option::None;
    }

    pub fn has_radius_y_low(&self) -> bool {
        self.radius_y_low.is_some()
    }

    // Param is passed by value, moved
    pub fn set_radius_y_low(&mut self, v: i32) {
        self.radius_y_low = ::std::option::Option::Some(v);
    }

    // optional int32 radius_x_high = 10;

    pub fn radius_x_high(&self) -> i32 {
        self.radius_x_high.unwrap_or(0)
    }

    pub fn clear_radius_x_high(&mut self) {
        self.radius_x_high = ::std::option::Option::None;
    }

    pub fn has_radius_x_high(&self) -> bool {
        self.radius_x_high.is_some()
    }

    // Param is passed by value, moved
    pub fn set_radius_x_high(&mut self, v: i32) {
        self.radius_x_high = ::std::option::Option::Some(v);
    }

    // optional int32 radius_y_high = 11;

    pub fn radius_y_high(&self) -> i32 {
        self.radius_y_high.unwrap_or(0)
    }

    pub fn clear_radius_y_high(&mut self) {
        self.radius_y_high = ::std::option::Option::None;
    }

    pub fn has_radius_y_high(&self) -> bool {
        self.radius_y_high.is_some()
    }

    // Param is passed by value, moved
    pub fn set_radius_y_high(&mut self, v: i32) {
        self.radius_y_high = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RemoteFortressReader::BuildingType>(
            "building_type",
            |m: &BuildSelector| { &m.building_type },
            |m: &mut BuildSelector| { &mut m.building_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "stage",
            |m: &BuildSelector| { &m.stage },
            |m: &mut BuildSelector| { &mut m.stage },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "choices",
            |m: &BuildSelector| { &m.choices },
            |m: &mut BuildSelector| { &mut m.choices },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "sel_index",
            |m: &BuildSelector| { &m.sel_index },
            |m: &mut BuildSelector| { &mut m.sel_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "requirements",
            |m: &BuildSelector| { &m.requirements },
            |m: &mut BuildSelector| { &mut m.requirements },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "req_index",
            |m: &BuildSelector| { &m.req_index },
            |m: &mut BuildSelector| { &mut m.req_index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "errors",
            |m: &BuildSelector| { &m.errors },
            |m: &mut BuildSelector| { &mut m.errors },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "radius_x_low",
            |m: &BuildSelector| { &m.radius_x_low },
            |m: &mut BuildSelector| { &mut m.radius_x_low },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "radius_y_low",
            |m: &BuildSelector| { &m.radius_y_low },
            |m: &mut BuildSelector| { &mut m.radius_y_low },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "radius_x_high",
            |m: &BuildSelector| { &m.radius_x_high },
            |m: &mut BuildSelector| { &mut m.radius_x_high },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "radius_y_high",
            |m: &BuildSelector| { &m.radius_y_high },
            |m: &mut BuildSelector| { &mut m.radius_y_high },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::RemoteFortressReader::Coord>(
            "cursor",
            |m: &BuildSelector| { &m.cursor },
            |m: &mut BuildSelector| { &mut m.cursor },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tiles",
            |m: &BuildSelector| { &m.tiles },
            |m: &mut BuildSelector| { &mut m.tiles },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BuildSelector>(
            "BuildSelector",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BuildSelector {
    const NAME: &'static str = "BuildSelector";

    fn is_initialized(&self) -> bool {
        for v in &self.building_type {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.choices {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.requirements {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cursor {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.building_type)?;
                },
                16 => {
                    self.stage = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                26 => {
                    self.choices.push(is.read_message()?);
                },
                32 => {
                    self.sel_index = ::std::option::Option::Some(is.read_int32()?);
                },
                42 => {
                    self.requirements.push(is.read_message()?);
                },
                48 => {
                    self.req_index = ::std::option::Option::Some(is.read_int32()?);
                },
                58 => {
                    self.errors.push(is.read_string()?);
                },
                64 => {
                    self.radius_x_low = ::std::option::Option::Some(is.read_int32()?);
                },
                72 => {
                    self.radius_y_low = ::std::option::Option::Some(is.read_int32()?);
                },
                80 => {
                    self.radius_x_high = ::std::option::Option::Some(is.read_int32()?);
                },
                88 => {
                    self.radius_y_high = ::std::option::Option::Some(is.read_int32()?);
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.cursor)?;
                },
                106 => {
                    is.read_repeated_packed_int32_into(&mut self.tiles)?;
                },
                104 => {
                    self.tiles.push(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.building_type.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.stage {
            my_size += ::protobuf::rt::int32_size(2, v.value());
        }
        for value in &self.choices {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.sel_index {
            my_size += ::protobuf::rt::int32_size(4, v);
        }
        for value in &self.requirements {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.req_index {
            my_size += ::protobuf::rt::int32_size(6, v);
        }
        for value in &self.errors {
            my_size += ::protobuf::rt::string_size(7, &value);
        };
        if let Some(v) = self.radius_x_low {
            my_size += ::protobuf::rt::int32_size(8, v);
        }
        if let Some(v) = self.radius_y_low {
            my_size += ::protobuf::rt::int32_size(9, v);
        }
        if let Some(v) = self.radius_x_high {
            my_size += ::protobuf::rt::int32_size(10, v);
        }
        if let Some(v) = self.radius_y_high {
            my_size += ::protobuf::rt::int32_size(11, v);
        }
        if let Some(v) = self.cursor.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.tiles {
            my_size += ::protobuf::rt::int32_size(13, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.building_type.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.stage {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        for v in &self.choices {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if let Some(v) = self.sel_index {
            os.write_int32(4, v)?;
        }
        for v in &self.requirements {
            ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
        };
        if let Some(v) = self.req_index {
            os.write_int32(6, v)?;
        }
        for v in &self.errors {
            os.write_string(7, &v)?;
        };
        if let Some(v) = self.radius_x_low {
            os.write_int32(8, v)?;
        }
        if let Some(v) = self.radius_y_low {
            os.write_int32(9, v)?;
        }
        if let Some(v) = self.radius_x_high {
            os.write_int32(10, v)?;
        }
        if let Some(v) = self.radius_y_high {
            os.write_int32(11, v)?;
        }
        if let Some(v) = self.cursor.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        for v in &self.tiles {
            os.write_int32(13, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BuildSelector {
        BuildSelector::new()
    }

    fn clear(&mut self) {
        self.building_type.clear();
        self.stage = ::std::option::Option::None;
        self.choices.clear();
        self.sel_index = ::std::option::Option::None;
        self.requirements.clear();
        self.req_index = ::std::option::Option::None;
        self.errors.clear();
        self.radius_x_low = ::std::option::Option::None;
        self.radius_y_low = ::std::option::Option::None;
        self.radius_x_high = ::std::option::Option::None;
        self.radius_y_high = ::std::option::Option::None;
        self.cursor.clear();
        self.tiles.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BuildSelector {
        static instance: BuildSelector = BuildSelector {
            building_type: ::protobuf::MessageField::none(),
            stage: ::std::option::Option::None,
            choices: ::std::vec::Vec::new(),
            sel_index: ::std::option::Option::None,
            requirements: ::std::vec::Vec::new(),
            req_index: ::std::option::Option::None,
            errors: ::std::vec::Vec::new(),
            radius_x_low: ::std::option::Option::None,
            radius_y_low: ::std::option::Option::None,
            radius_x_high: ::std::option::Option::None,
            radius_y_high: ::std::option::Option::None,
            cursor: ::protobuf::MessageField::none(),
            tiles: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BuildSelector {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BuildSelector").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BuildSelector {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BuildSelector {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:DwarfControl.BuildCategory)
pub enum BuildCategory {
    // @@protoc_insertion_point(enum_value:DwarfControl.BuildCategory.NotCategory)
    NotCategory = 0,
    // @@protoc_insertion_point(enum_value:DwarfControl.BuildCategory.SiegeEngines)
    SiegeEngines = 1,
    // @@protoc_insertion_point(enum_value:DwarfControl.BuildCategory.Traps)
    Traps = 2,
    // @@protoc_insertion_point(enum_value:DwarfControl.BuildCategory.Workshops)
    Workshops = 3,
    // @@protoc_insertion_point(enum_value:DwarfControl.BuildCategory.Furnaces)
    Furnaces = 4,
    // @@protoc_insertion_point(enum_value:DwarfControl.BuildCategory.Constructions)
    Constructions = 5,
    // @@protoc_insertion_point(enum_value:DwarfControl.BuildCategory.MachineComponents)
    MachineComponents = 6,
    // @@protoc_insertion_point(enum_value:DwarfControl.BuildCategory.Track)
    Track = 7,
}

impl ::protobuf::Enum for BuildCategory {
    const NAME: &'static str = "BuildCategory";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BuildCategory> {
        match value {
            0 => ::std::option::Option::Some(BuildCategory::NotCategory),
            1 => ::std::option::Option::Some(BuildCategory::SiegeEngines),
            2 => ::std::option::Option::Some(BuildCategory::Traps),
            3 => ::std::option::Option::Some(BuildCategory::Workshops),
            4 => ::std::option::Option::Some(BuildCategory::Furnaces),
            5 => ::std::option::Option::Some(BuildCategory::Constructions),
            6 => ::std::option::Option::Some(BuildCategory::MachineComponents),
            7 => ::std::option::Option::Some(BuildCategory::Track),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<BuildCategory> {
        match str {
            "NotCategory" => ::std::option::Option::Some(BuildCategory::NotCategory),
            "SiegeEngines" => ::std::option::Option::Some(BuildCategory::SiegeEngines),
            "Traps" => ::std::option::Option::Some(BuildCategory::Traps),
            "Workshops" => ::std::option::Option::Some(BuildCategory::Workshops),
            "Furnaces" => ::std::option::Option::Some(BuildCategory::Furnaces),
            "Constructions" => ::std::option::Option::Some(BuildCategory::Constructions),
            "MachineComponents" => ::std::option::Option::Some(BuildCategory::MachineComponents),
            "Track" => ::std::option::Option::Some(BuildCategory::Track),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [BuildCategory] = &[
        BuildCategory::NotCategory,
        BuildCategory::SiegeEngines,
        BuildCategory::Traps,
        BuildCategory::Workshops,
        BuildCategory::Furnaces,
        BuildCategory::Constructions,
        BuildCategory::MachineComponents,
        BuildCategory::Track,
    ];
}

impl ::protobuf::EnumFull for BuildCategory {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("BuildCategory").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for BuildCategory {
    fn default() -> Self {
        BuildCategory::NotCategory
    }
}

impl BuildCategory {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<BuildCategory>("BuildCategory")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:DwarfControl.MenuAction)
pub enum MenuAction {
    // @@protoc_insertion_point(enum_value:DwarfControl.MenuAction.MenuNone)
    MenuNone = 0,
    // @@protoc_insertion_point(enum_value:DwarfControl.MenuAction.MenuSelect)
    MenuSelect = 1,
    // @@protoc_insertion_point(enum_value:DwarfControl.MenuAction.MenuCancel)
    MenuCancel = 2,
    // @@protoc_insertion_point(enum_value:DwarfControl.MenuAction.MenuSelectAll)
    MenuSelectAll = 3,
}

impl ::protobuf::Enum for MenuAction {
    const NAME: &'static str = "MenuAction";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MenuAction> {
        match value {
            0 => ::std::option::Option::Some(MenuAction::MenuNone),
            1 => ::std::option::Option::Some(MenuAction::MenuSelect),
            2 => ::std::option::Option::Some(MenuAction::MenuCancel),
            3 => ::std::option::Option::Some(MenuAction::MenuSelectAll),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<MenuAction> {
        match str {
            "MenuNone" => ::std::option::Option::Some(MenuAction::MenuNone),
            "MenuSelect" => ::std::option::Option::Some(MenuAction::MenuSelect),
            "MenuCancel" => ::std::option::Option::Some(MenuAction::MenuCancel),
            "MenuSelectAll" => ::std::option::Option::Some(MenuAction::MenuSelectAll),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [MenuAction] = &[
        MenuAction::MenuNone,
        MenuAction::MenuSelect,
        MenuAction::MenuCancel,
        MenuAction::MenuSelectAll,
    ];
}

impl ::protobuf::EnumFull for MenuAction {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("MenuAction").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for MenuAction {
    fn default() -> Self {
        MenuAction::MenuNone
    }
}

impl MenuAction {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<MenuAction>("MenuAction")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:DwarfControl.BuildSelectorStage)
pub enum BuildSelectorStage {
    // @@protoc_insertion_point(enum_value:DwarfControl.BuildSelectorStage.StageNoMat)
    StageNoMat = 0,
    // @@protoc_insertion_point(enum_value:DwarfControl.BuildSelectorStage.StagePlace)
    StagePlace = 1,
    // @@protoc_insertion_point(enum_value:DwarfControl.BuildSelectorStage.StageItemSelect)
    StageItemSelect = 2,
}

impl ::protobuf::Enum for BuildSelectorStage {
    const NAME: &'static str = "BuildSelectorStage";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BuildSelectorStage> {
        match value {
            0 => ::std::option::Option::Some(BuildSelectorStage::StageNoMat),
            1 => ::std::option::Option::Some(BuildSelectorStage::StagePlace),
            2 => ::std::option::Option::Some(BuildSelectorStage::StageItemSelect),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<BuildSelectorStage> {
        match str {
            "StageNoMat" => ::std::option::Option::Some(BuildSelectorStage::StageNoMat),
            "StagePlace" => ::std::option::Option::Some(BuildSelectorStage::StagePlace),
            "StageItemSelect" => ::std::option::Option::Some(BuildSelectorStage::StageItemSelect),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [BuildSelectorStage] = &[
        BuildSelectorStage::StageNoMat,
        BuildSelectorStage::StagePlace,
        BuildSelectorStage::StageItemSelect,
    ];
}

impl ::protobuf::EnumFull for BuildSelectorStage {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("BuildSelectorStage").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for BuildSelectorStage {
    fn default() -> Self {
        BuildSelectorStage::StageNoMat
    }
}

impl BuildSelectorStage {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<BuildSelectorStage>("BuildSelectorStage")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12DwarfControl.proto\x12\x0cDwarfControl\x1a\x15ui_sidebar_mode.prot\
    o\x1a\x1aRemoteFortressReader.proto\"\xcb\x01\n\x0cSidebarState\x12@\n\
    \x04mode\x18\x01\x20\x01(\x0e2,.proto.enums.ui_sidebar_mode.ui_sidebar_m\
    odeR\x04mode\x125\n\nmenu_items\x18\x02\x20\x03(\x0b2\x16.DwarfControl.M\
    enuItemR\tmenuItems\x12B\n\x0ebuild_selector\x18\x03\x20\x01(\x0b2\x1b.D\
    warfControl.BuildSelectorR\rbuildSelector\"\xbe\x01\n\x08MenuItem\x12G\n\
    \rbuilding_type\x18\x01\x20\x01(\x0b2\".RemoteFortressReader.BuildingTyp\
    eR\x0cbuildingType\x12%\n\x0eexisting_count\x18\x02\x20\x01(\x05R\rexist\
    ingCount\x12B\n\x0ebuild_category\x18\x03\x20\x01(\x0e2\x1b.DwarfControl\
    .BuildCategoryR\rbuildCategory\"\xe9\x01\n\x0eSidebarCommand\x12@\n\x04m\
    ode\x18\x01\x20\x01(\x0e2,.proto.enums.ui_sidebar_mode.ui_sidebar_modeR\
    \x04mode\x12\x1d\n\nmenu_index\x18\x02\x20\x01(\x05R\tmenuIndex\x120\n\
    \x06action\x18\x03\x20\x01(\x0e2\x18.DwarfControl.MenuActionR\x06action\
    \x12D\n\x0fselection_coord\x18\x04\x20\x01(\x0b2\x1b.RemoteFortressReade\
    r.CoordR\x0eselectionCoord\"\x87\x01\n\x0fBuiildReqChoice\x12\x1a\n\x08d\
    istance\x18\x01\x20\x01(\x05R\x08distance\x12\x12\n\x04name\x18\x02\x20\
    \x01(\tR\x04name\x12%\n\x0enum_candidates\x18\x03\x20\x01(\x05R\rnumCand\
    idates\x12\x1d\n\nused_count\x18\x04\x20\x01(\x05R\tusedCount\"y\n\x0cBu\
    ildItemReq\x12%\n\x0ecount_required\x18\x02\x20\x01(\x05R\rcountRequired\
    \x12\x1b\n\tcount_max\x18\x03\x20\x01(\x05R\x08countMax\x12%\n\x0ecount_\
    provided\x18\x04\x20\x01(\x05R\rcountProvided\"\xb2\x04\n\rBuildSelector\
    \x12G\n\rbuilding_type\x18\x01\x20\x01(\x0b2\".RemoteFortressReader.Buil\
    dingTypeR\x0cbuildingType\x126\n\x05stage\x18\x02\x20\x01(\x0e2\x20.Dwar\
    fControl.BuildSelectorStageR\x05stage\x127\n\x07choices\x18\x03\x20\x03(\
    \x0b2\x1d.DwarfControl.BuiildReqChoiceR\x07choices\x12\x1b\n\tsel_index\
    \x18\x04\x20\x01(\x05R\x08selIndex\x12>\n\x0crequirements\x18\x05\x20\
    \x03(\x0b2\x1a.DwarfControl.BuildItemReqR\x0crequirements\x12\x1b\n\treq\
    _index\x18\x06\x20\x01(\x05R\x08reqIndex\x12\x16\n\x06errors\x18\x07\x20\
    \x03(\tR\x06errors\x12\x20\n\x0cradius_x_low\x18\x08\x20\x01(\x05R\nradi\
    usXLow\x12\x20\n\x0cradius_y_low\x18\t\x20\x01(\x05R\nradiusYLow\x12\"\n\
    \rradius_x_high\x18\n\x20\x01(\x05R\x0bradiusXHigh\x12\"\n\rradius_y_hig\
    h\x18\x0b\x20\x01(\x05R\x0bradiusYHigh\x123\n\x06cursor\x18\x0c\x20\x01(\
    \x0b2\x1b.RemoteFortressReader.CoordR\x06cursor\x12\x14\n\x05tiles\x18\r\
    \x20\x03(\x05R\x05tiles*\x8f\x01\n\rBuildCategory\x12\x0f\n\x0bNotCatego\
    ry\x10\0\x12\x10\n\x0cSiegeEngines\x10\x01\x12\t\n\x05Traps\x10\x02\x12\
    \r\n\tWorkshops\x10\x03\x12\x0c\n\x08Furnaces\x10\x04\x12\x11\n\rConstru\
    ctions\x10\x05\x12\x15\n\x11MachineComponents\x10\x06\x12\t\n\x05Track\
    \x10\x07*M\n\nMenuAction\x12\x0c\n\x08MenuNone\x10\0\x12\x0e\n\nMenuSele\
    ct\x10\x01\x12\x0e\n\nMenuCancel\x10\x02\x12\x11\n\rMenuSelectAll\x10\
    \x03*I\n\x12BuildSelectorStage\x12\x0e\n\nStageNoMat\x10\0\x12\x0e\n\nSt\
    agePlace\x10\x01\x12\x13\n\x0fStageItemSelect\x10\x02B\x02H\x03b\x06prot\
    o2\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::ui_sidebar_mode::file_descriptor().clone());
            deps.push(super::RemoteFortressReader::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(6);
            messages.push(SidebarState::generated_message_descriptor_data());
            messages.push(MenuItem::generated_message_descriptor_data());
            messages.push(SidebarCommand::generated_message_descriptor_data());
            messages.push(BuiildReqChoice::generated_message_descriptor_data());
            messages.push(BuildItemReq::generated_message_descriptor_data());
            messages.push(BuildSelector::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(3);
            enums.push(BuildCategory::generated_enum_descriptor_data());
            enums.push(MenuAction::generated_enum_descriptor_data());
            enums.push(BuildSelectorStage::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
